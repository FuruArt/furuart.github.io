<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog w Pełni</title>
    <description>Projektowanie i Kodowanie w Pełni</description>
    <link>/</link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 28 Jul 2016 18:51:26 +0200</pubDate>
    <lastBuildDate>Thu, 28 Jul 2016 18:51:26 +0200</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>Grid system - czyli jak siatka zmieniła podejście do mobilnej technologii</title>
        <description>&lt;h3 id=&quot;dzisiaj-zajmiemy-si-niewielkim-narzdziem-ktre-zrewolucjonizowao-trudny-wyraz-musiaem-sobie-przeliterowa-dzisiejsze-strony-internetowe-aplikacje-oraz-przede-wszystkim-moliwo-rozwinicia-responsive-web-designu&quot;&gt;Dzisiaj zajmiemy się niewielkim narzędziem, które zrewolucjonizowało (trudny wyraz, musiałem sobie przeliterować) dzisiejsze strony internetowe, aplikacje oraz przede wszystkim możliwość rozwinięcia Responsive Web design’u!&lt;/h3&gt;

&lt;!--more--&gt;

&lt;p&gt;Grid system - (tutaj powinna pojawić się mądra definicja z wikipedii.org, jednakże znalazłem jedynie informację o tym, że &lt;a href=&quot;https://pl.wikipedia.org/wiki/GRID_(medycyna)&quot;&gt;GRID&lt;/a&gt; było pierwotną nazwą dla choroby AIDS zaproponowaną w 1982 roku, czyli ja zajmę się definicją)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Siatka używana w projektowaniu oraz kodowaniu, umożliwiająca idealne rozłożenie elementów, tak aby na każdym urządzeniu strona prezentowała się dobrze, odstępy między sekcjami były równe, po prostu żeby wszystko było perfekcyjnie.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Siatka powiadacie… &lt;img src=&quot;http://www.solexogrodzenia.pl/produkty/3/images/products/53_182.jpg&quot; alt=&quot;Grid #0-1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Taka? Nie do końca… &lt;code&gt;Siatka&lt;/code&gt;, czyli obszar składający się nieskończenie długich prostokątów o określonej szerokości, odsunięte od siebie o prostokąty o określonej, dużo mniejszej szerokości, a całość zamknięta jest w szerokości maksymalnej &lt;code&gt;960&lt;/code&gt; (słownie dziewięćset sześćdziesiąt) pikseli. Z grubsza tak to właśnie wygląda:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://blogwpelni.files.wordpress.com/2016/05/grid1.png&quot; alt=&quot;Grid #0-2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;No dobrze, ale jakie szerokości mają poszczególne prostokąty, czemu &lt;code&gt;960 pikseli&lt;/code&gt;? Szerokość jednej kolumny, bo ów prostokąty nazywamy kolumnami mają 80 pikseli, czemu 80? Prosta i szybka matematyka:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var width = 80;
var grid = 960;
var count = grid/width;

document.write(grid/count);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Co w końcowym rozrachunku daje nam odpowiedź, że &lt;code&gt;960 pikseli&lt;/code&gt; podzielone przez &lt;code&gt;80 pikseli&lt;/code&gt; daje liczbę &lt;code&gt;12&lt;/code&gt; (piksele się skracają ze sobą [px/px]). Czyli jesteśmy w stanie wywnioskować że możemy utworzyć 12 kolumn, aby grid miał pełną szerokość. Jednakże, nie damy mu pełnych 80 pikseli, ponieważ nie byłoby miejsca na odstępy między kolumnami, wobec czego odejmujemy &lt;code&gt;20 pikseli&lt;/code&gt; od &lt;code&gt;80 pikseli&lt;/code&gt;, otrzymujemy w ten sposób &lt;code&gt;60 pikseli&lt;/code&gt;. Dzięki czemu nasz Grid będzie wyglądał w następujący sposób:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://blogwpelni.files.wordpress.com/2016/05/grid2.png&quot; alt=&quot;Grid #0-3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Powodując, że obszar naszego działania to &lt;code&gt;940 pikseli&lt;/code&gt;. Tylko w ten sposób jesteśmy w stanie mieć &lt;code&gt;12 kolumn&lt;/code&gt; po &lt;code&gt;20 pikseli&lt;/code&gt; odstępu między nimi, no dobrze ale po co ten cały zachód i te złożone obliczenia? &lt;code&gt;960 pikseli&lt;/code&gt; mieści się w obszarze &lt;code&gt;1024x768 px&lt;/code&gt;, które jest uważane za standard rozdzielczości, jaką spełnia każdy monitor przeciętnego użytkownika internetu. Chwaląc się, powiem że &lt;code&gt;960&lt;/code&gt; jest podzielne przez 2, 3, 4, 5, 6, 8, 10, 12, 15, 16, 20, 24, 30, 32, 40, 48, 60, 64, 80, 96, 120, 160, 192, 240, 320 oraz 480, co daje perfekcyjne rozłożenie pikseli na ekranie. Dobrze, to wytłumaczyłem już skąd pomysł na &lt;code&gt;Grid&lt;/code&gt; (Grid to po angielsku siatka), jak wymyślono jej idealne wymiary oraz do czego służy, czas na powiedzenie: A na kij mi to w developerce? No właśnie i tutaj &lt;code&gt;Responsive Webdesign&lt;/code&gt; przychodzi z wyjaśnieniami, ponieważ nie ma lepszego sposobu na skalowanie strony na różnych urządzeniach niż właśnie użycie perfekcyjnie odmierzonej siatki, która dostosowuje się sama do ekranu. Ale my tu pitu pitu, a przydałoby się pokazać jak to wygląda w praniu, no to do roboty! Odpalamy nasze środowisko pracy, tworzymy jakikolwiek dokument html i css lub dla ambitniejszych gulp’ujemy sobie Jade’a i Sass’a:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&quot;pl&quot;&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;meta charset=&quot;UTF-8&quot;&amp;gt;
  &amp;lt;title&amp;gt;Grid system&amp;lt;/title&amp;gt;
  &amp;lt;link rel=&quot;stylesheet&quot; href=&quot;css/main.css&quot;&amp;gt;
  &amp;lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;div class=&quot;container&quot;&amp;gt;
    &amp;lt;div class=&quot;row&quot;&amp;gt;
      &amp;lt;div class=&quot;col-12&quot;&amp;gt;
        &amp;lt;h1&amp;gt;12&amp;lt;/h1&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class=&quot;row&quot;&amp;gt;
      &amp;lt;div class=&quot;col-11&quot;&amp;gt;
        &amp;lt;h1&amp;gt;11&amp;lt;/h1&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;div class=&quot;col-1&quot;&amp;gt;
        &amp;lt;h1&amp;gt;1    &amp;lt;/h1&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class=&quot;row&quot;&amp;gt;
      &amp;lt;div class=&quot;col-10&quot;&amp;gt;
        &amp;lt;h1&amp;gt;10&amp;lt;/h1&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;div class=&quot;col-2&quot;&amp;gt;
        &amp;lt;h1&amp;gt;2&amp;lt;/h1&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class=&quot;row&quot;&amp;gt;   
      &amp;lt;div class=&quot;col-9&quot;&amp;gt;
        &amp;lt;h1&amp;gt;9&amp;lt;/h1&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;div class=&quot;col-3&quot;&amp;gt;
        &amp;lt;h1&amp;gt;3&amp;lt;/h1&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class=&quot;row&quot;&amp;gt;   
      &amp;lt;div class=&quot;col-8&quot;&amp;gt;
        &amp;lt;h1&amp;gt;8&amp;lt;/h1&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;div class=&quot;col-4&quot;&amp;gt;
        &amp;lt;h1&amp;gt;4&amp;lt;/h1&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class=&quot;row&quot;&amp;gt;   
      &amp;lt;div class=&quot;col-7&quot;&amp;gt;
        &amp;lt;h1&amp;gt;7&amp;lt;/h1&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;div class=&quot;col-5&quot;&amp;gt;
        &amp;lt;h1&amp;gt;5&amp;lt;/h1&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class=&quot;row&quot;&amp;gt;   
      &amp;lt;div class=&quot;col-6&quot;&amp;gt;
        &amp;lt;h1&amp;gt;6&amp;lt;/h1&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;div class=&quot;col-6&quot;&amp;gt;
        &amp;lt;h1&amp;gt;6&amp;lt;/h1&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class=&quot;row&quot;&amp;gt;  
      &amp;lt;div class=&quot;col-5&quot;&amp;gt;
        &amp;lt;h1&amp;gt;5&amp;lt;/h1&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;div class=&quot;col-7&quot;&amp;gt;
        &amp;lt;h1&amp;gt;7&amp;lt;/h1&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class=&quot;row&quot;&amp;gt;   
      &amp;lt;div class=&quot;col-4&quot;&amp;gt;
        &amp;lt;h1&amp;gt;4&amp;lt;/h1&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;div class=&quot;col-8&quot;&amp;gt;
        &amp;lt;h1&amp;gt;8&amp;lt;/h1&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class=&quot;row&quot;&amp;gt;  
      &amp;lt;div class=&quot;col-3&quot;&amp;gt;
        &amp;lt;h1&amp;gt;3&amp;lt;/h1&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;div class=&quot;col-9&quot;&amp;gt;
        &amp;lt;h1&amp;gt;9&amp;lt;/h1&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class=&quot;row&quot;&amp;gt;   
      &amp;lt;div class=&quot;col-2&quot;&amp;gt;
        &amp;lt;h1&amp;gt;2&amp;lt;/h1&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;div class=&quot;col-10&quot;&amp;gt;
        &amp;lt;h1&amp;gt;10&amp;lt;/h1&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class=&quot;row&quot;&amp;gt;   
      &amp;lt;div class=&quot;col-1&quot;&amp;gt;
        &amp;lt;h1&amp;gt; 1&amp;lt;/h1&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;div class=&quot;col-11&quot;&amp;gt;
        &amp;lt;h1&amp;gt;11&amp;lt;/h1&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class=&quot;row&quot;&amp;gt;
      &amp;lt;div class=&quot;col-12&quot;&amp;gt;
        &amp;lt;h1&amp;gt;12&amp;lt;/h1&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class=&quot;row&quot;&amp;gt;
      &amp;lt;div class=&quot;col-3&quot;&amp;gt;
        &amp;lt;h1&amp;gt;1&amp;lt;/h1&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;div class=&quot;col-3&quot;&amp;gt;
        &amp;lt;h1&amp;gt;2&amp;lt;/h1&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;div class=&quot;col-3&quot;&amp;gt;
        &amp;lt;h1&amp;gt;3&amp;lt;/h1&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;div class=&quot;col-3&quot;&amp;gt;
        &amp;lt;h1&amp;gt;4&amp;lt;/h1&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class=&quot;row&quot;&amp;gt;
      &amp;lt;div class=&quot;col-4&quot;&amp;gt;
        &amp;lt;h1&amp;gt;1&amp;lt;/h1&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;div class=&quot;col-4&quot;&amp;gt;
        &amp;lt;h1&amp;gt;2&amp;lt;/h1&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;div class=&quot;col-4&quot;&amp;gt;
        &amp;lt;h1&amp;gt;3&amp;lt;/h1&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;* {
  box-sizing: border-box;
  font-family: sans-serif; }

.container {
  max-width: 960px;
  margin: 0 auto;
  padding: 0; }

.row {
  margin: 0;
  padding: 0; }
  .row::after {
    content: &#39;&#39;;
    clear: both;
    display: block; }

[class*=&#39;col-&#39;] {
  float: left;
  border: 1px solid orange;
  color: #111;
  text-align: center;
  vertical-align: center; }

.col-1 {
  width: calc(8.33%*1); }

.col-2 {
  width: calc(8.33%*2); }

.col-3 {
  width: calc(8.33%*3); }

.col-4 {
  width: calc(8.33%*4); }

.col-5 {
  width: calc(8.33%*5); }

.col-6 {
  width: calc(8.33%*6); }

.col-7 {
  width: calc(8.33%*7); }

.col-8 {
  width: calc(8.33%*8); }

.col-9 {
  width: calc(8.33%*9); }

.col-10 {
  width: calc(8.33%*10); }

.col-11 {
  width: calc(8.33%*11); }

.col-12 {
  width: calc(8.33%*12); }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Dzięki czemu powinniśmy otrzymać coś takiego:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://blogwpelni.files.wordpress.com/2016/05/grid3.png&quot; alt=&quot;Grid #0-4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I teraz jeśli zaczniemy zmniejszać okno przeglądarki w poziomie, powinniśmy otrzymać:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://blogwpelni.files.wordpress.com/2016/05/grid4.png&quot; alt=&quot;Grid #0-5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Co oznacza mniej więcej tyle, że nasz grid jest responsywny ponieważ skaluje się wraz z szerokością ekranu. Szerokość &lt;code&gt;8.33%&lt;/code&gt;, wzięła się z podzielenia &lt;code&gt;100%&lt;/code&gt; przez &lt;code&gt;12&lt;/code&gt;, dokładniej na temat powyższego kodu, będę mówił podczas następnej lekcji z Gulp’a, gdzie będziemy już tworzyć responsywną stronę WWW. Pliki z dzisiejszej lekcji znajdą się również na &lt;a href=&quot;https://github.com/FuruArt/GulpowanieZFuru&quot;&gt;Github’ie&lt;/a&gt;. Grid pozwala nam na szybkie ustawienie elementów, które będą się perfekcyjne skalować wraz z ekranem.&lt;/p&gt;

&lt;p&gt;Jeśli chodzi o temat samego Grid’u to myślę, że na tą lekcję wystarczy, nauczyliśmy się czym jest Grid, jak pomaga w życiu web designer’a oraz web developer’a, jakie niesie korzyści oraz jak go stworzyć w html i css, tymczasem jak zawsze jeśli podobał Ci się ten artykuł, zaciekawił Cię temat siatki, spróbowałeś zrobić własną siatkę wedle mojego kodu lub po prostu chcesz docenić moje publikacje zostaw ‘Lubię to!’, skomentuj, udostępnij, a na pewno będę Ci za to wdzięczny, do następnej lekcji w Pełni :&amp;gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Artykuł oraz grafiki w nim zawarte są moją własnością - &lt;strong&gt;Furu.Art&lt;/strong&gt; - zakaz kopiowania treści na inne blogi, fanpage czy strony - bo nogi z &lt;em&gt;**&lt;/em&gt; powyrywam!&lt;/p&gt;
</description>
        <pubDate>Tue, 31 May 2016 16:00:00 +0200</pubDate>
        <link>/gridsystem/</link>
        <guid isPermaLink="true">/gridsystem/</guid>
        
        <category>ninesix</category>
        
        <category>calc</category>
        
        <category>code</category>
        
        <category>css</category>
        
        <category>design</category>
        
        <category>development</category>
        
        <category>Dla Webdesignera</category>
        
        <category>Dla Webdevelopera</category>
        
        <category>front-end</category>
        
        <category>grid</category>
        
        <category>gs</category>
        
        <category>html</category>
        
        <category>math</category>
        
        <category>obliczenia</category>
        
        <category>perfect</category>
        
        <category>responsive</category>
        
        <category>rwd</category>
        
        <category>scale</category>
        
        <category>siatka</category>
        
        <category>system</category>
        
        
        <category>Dla webdeveloper&#39;a</category>
        
        <category>Dla webdesigner&#39;a</category>
        
      </item>
    
      <item>
        <title>Kot z mackami jako źródło nieskończonej inwencji twórczej - GitHub[#1]</title>
        <description>&lt;h3 id=&quot;przechadzajc-si-po-internetowej-polanie-w-poszukiwaniu-pewnych-bibliotek-funkcji-ciekawych-rozwiza-nowych-moliwoci-czy-po-prostu-dobrze-uporzdkowanej-dokumentacji-zazwyczaj-caa-moja-wyprawa-koczy-si-na-githubie-to-wanie-nim-dzisiaj-si-zajmiemy&quot;&gt;Przechadzając się po internetowej polanie w poszukiwaniu pewnych bibliotek, funkcji, ciekawych rozwiązań, nowych możliwości czy po prostu dobrze uporządkowanej dokumentacji zazwyczaj cała moja wyprawa kończy się na GitHub’ie. To właśnie nim dzisiaj się zajmiemy!&lt;/h3&gt;

&lt;!--more--&gt;

&lt;p&gt;GitHub czyli właściwie co?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;GitHub - hostingowy serwis internetowy przeznaczony dla projektów programistycznych wykorzystujących system kontroli wersji Git. Stworzony został przy pomocy Ruby on Rails i bla bla bla.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Dalej Wikipedia chwali się ile to GitHub posiada użytkowników i takie inne. Musiałem się wesprzeć jakimś naukowym bełkotem, żeby móc go przetłumaczyć na język zwykłego zjadacza chleba. Hostingowy serwis internetowy - co to oznaczać? Oznaczać to mniej więcej tyle, że GitHub umożliwia przechowywanie własnych stron, aplikacji, programów na swoim serwisie udostępniając nam za darmo lub płatnie (różnice za chwilę) swoją platformę. Gdzie za &lt;code&gt;0 USD&lt;/code&gt; możemy wstawiać nasze pliki tylko jako publiczne, czyli każdy ma prawo w ich wgląd (jeżeli nie opatentujecie jakiejś mega innowacji to raczej możecie cieszyć się spokojem, że nikt was nie nawiedzi), zaś za sumkę &lt;code&gt;7$/miesiąc&lt;/code&gt; lub &lt;code&gt;84$/rok&lt;/code&gt; możecie zapewnić sobie prywatne repozytoria (taką mądrą i wyszukaną nazwę noszą tworzone przez nas &lt;code&gt;foldery&lt;/code&gt; główne naszych tworów wrzucanych na GitHub’a). Ja nie wiedzieć co znaczyć system kontroli wersji -&amp;gt; &lt;code&gt;Git&lt;/code&gt;. System kontroli wersji to oprogramowanie, które służy do sprawdzania i wprowadzania zmian w kodzie źródłowym od początku jego istnienia do finalnego produktu oraz łączenia różnych wersji modyfikacji kodu przez różnych ludzi w różnych odstępach czasu, wygląda to schematycznie jakoś tak:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://blogwpelni.files.wordpress.com/2016/05/github1.png&quot; alt=&quot;Github #1-1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A to co? Rozkład jazdy tramwajów czy jak? No mniej więcej tak to wygląda, ale mówi o czymś zgoła innym. &lt;code&gt;Zielone kwadraty&lt;/code&gt; to kod źródłowy tworzonego programu, aplikacji, strony, biblioteki itp., &lt;code&gt;żółte kwadraty&lt;/code&gt; stanowią modyfikacje zielonych kwadratów w tak zwanych &lt;code&gt;Branches&lt;/code&gt;, czyli gałęziach mówiąc po Polsku, ale czym są te gałęzie? &lt;code&gt;Gałęzie&lt;/code&gt; to po prostu modyfikacje kodu przez innych użytkowników lub tego samego, który chce zachować oryginalny kod, lecz rozszerzyć go o dodatkowe funkcje, usprawnienia, tak aby kod źródłowy pozostał na swoim miejscu. No dobrze, to wiemy już co to są Branches, ale co u diaska oznacza &lt;code&gt;czerwona strzałka&lt;/code&gt;? Oznacza połączenie, scalenie, czyli nasz kod źródłowy z indeksem &lt;code&gt;1&lt;/code&gt;, teraz został złączony ze zmianami zawartymi w gałęziach &lt;code&gt;2&lt;/code&gt; i &lt;code&gt;3&lt;/code&gt;, tworząc nowy kod źródłowy o indeksie &lt;code&gt;4&lt;/code&gt;, który zostaje dalej rozbudowywany w gałęziach &lt;code&gt;6&lt;/code&gt; i &lt;code&gt;7&lt;/code&gt;, i pod wpływem połączenia zmian otrzymujemy nowy kod źródłowy, prawdopodobnie finalny produkt, funkcjonalność, o indeksie &lt;code&gt;9&lt;/code&gt;, dobrze ale w takim razie co się dzieje w gałęziach &lt;code&gt;5&lt;/code&gt; i &lt;code&gt;8&lt;/code&gt;? Tworzą one oddzielną gałąź, gdzie na podstawie kodu z punktu &lt;code&gt;4&lt;/code&gt;, powstanie nowa funkcjonalność o indeksie &lt;code&gt;10&lt;/code&gt;. Mniej więcej właśnie w ten sposób funkcjonuje system kontroli wersji, więc &lt;code&gt;Git&lt;/code&gt; jest po prostu jednym z bardziej rozpoznawalnych oprogramowań oferujących system kontroli wersji. No dobrze, ale teraz w takim razie co ma Piernik do wiatraka, a raczej Git do GitHub’a? Git jest oprogramowaniem, a GitHub serwisem, łączą je na pierwszy rzut oka dwie rzeczy: &lt;code&gt;Git&lt;/code&gt; z przodu oraz oba zajmują się kontrolą wersji, a więc czym się różnią? GitHub, to społeczność w której za pośrednictwem przeglądarki programiści mogą kontrolować swoje repozytoria, natomiast Git jest zwykłym programem, który instaluje się na komputerze i jesteśmy w stanie zarządzać naszymi plikami przy pomocy konsoli, więc można by rzec że GitHub to po prostu większa wygoda użytkowania niż uczenie się komend i klepanie ich. W rzeczy samej, tak to wygląda, jednakże GitHub’a również możemy zainstalować na komputerze i zarządzać plikami, w celu szybszej integracji naszych lokalnych plików z serwerem GitHub’a. Wstęp historyczno-teoretyczny odfajkowany, więc możemy przystąpić do &lt;code&gt;Hello world!&lt;/code&gt; w świecie GitHub’owych repozytoriów. Zaczynamy!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://blogwpelni.files.wordpress.com/2016/05/github2.png&quot; alt=&quot;Github #1-2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Zacznijmy od podstaw czyli stworzenie konta na serwisie &lt;a href=&quot;http://github.com&quot;&gt;GitHub&lt;/a&gt;. Wchodzimy w &lt;a href=&quot;http://github.com&quot;&gt;GitHub&lt;/a&gt;, na stronie ukaże nam się pasek nawigacji, gdzie znajdują się dwa przyciski &lt;code&gt;Sign in&lt;/code&gt; i &lt;code&gt;Sign up&lt;/code&gt; (tutaj GitHub popełnił poważny błąd w designie, ponieważ nigdy nie wstawiamy nazw zbliżonych do siebie, jeżeli funkcje które pełnią są zupełnie inne, &lt;code&gt;Sign in&lt;/code&gt; -&amp;gt; &lt;code&gt;Login&lt;/code&gt;, &lt;code&gt;Sign up&lt;/code&gt; -&amp;gt; &lt;code&gt;Register&lt;/code&gt;, tak powinno to wyglądać), wybieramy &lt;code&gt;Sign up&lt;/code&gt; czyli rejestracja i uzupełniamy wszystko jak należy:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://blogwpelni.files.wordpress.com/2016/05/github3.png&quot; alt=&quot;Github #1-3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;(Username: &lt;code&gt;lubieplacki&lt;/code&gt;, jest już zajęte więc trzeba wymyślić coś mądrzejszego), dalej gdy klikniemy przycisk &lt;code&gt;Create an account&lt;/code&gt;, wybieramy plan darmowy, czyli ten w którym nie ma napisanej kwoty miesięcznej, następnie przechodzimy do naszego kokpitu i tutaj zaczynamy już stricte praktyczne działania. Czyli tworzymy swoje pierwsze repozytorium! Jeżeli zostaliśmy przekierowani na adres, który kończy się /naszaNazwaUżytkownika, to wybieramy zakładkę &lt;code&gt;Repositories&lt;/code&gt;, gdzie klikamy przycisk &lt;code&gt;New&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://blogwpelni.files.wordpress.com/2016/05/github4.png&quot; alt=&quot;Github #1-4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Rzecz jasna domyślnie, po świeżej rejestracji nie będziecie mieli w zakładce repositories kompletnie nic. Teraz w kreatorze:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://blogwpelni.files.wordpress.com/2016/05/github5.png&quot; alt=&quot;Github #1-5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;W &lt;code&gt;Repository name&lt;/code&gt; wpisujemy nazwę naszego repozytorium, &lt;code&gt;Description&lt;/code&gt; czyli opis, nie musi go być, wybieramy &lt;code&gt;Public&lt;/code&gt;, chyba że jesteśmy bogaczami to Private, zaznaczamy &lt;code&gt;Initialize this repository with a README&lt;/code&gt; i pod spodem mamy takie dwie dziwne rzeczy:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Add .gitignore **None**&lt;/code&gt; i &lt;code&gt;Add a license **None**&lt;/code&gt;. Pierwsza opcja to tak zwane ignorowanie rozszerzeń plików, które mogą zaśmiecać nasz projekt niepotrzebnie, czyli np. rozszerzenia Windows’a, których zwyczajnie nie potrzebujemy w naszym projekcie, nie za często korzystam z tej opcji, więc podrzucę link do generatora plików GitIgnore -&amp;gt; &lt;a href=&quot;http://gitignore.io&quot;&gt;tutaj&lt;/a&gt;. Zaś &lt;code&gt;Add license&lt;/code&gt;, pozwala nam dodać licencje naszego repozytorium, szerzej o licencjach możecie sobie poczytać np. &lt;a href=&quot;https://pl.wikipedia.org/wiki/Licencja_oprogramowania&quot;&gt;tutaj&lt;/a&gt;. Gdy ustawimy wszystko tak jak chcieliśmy, klikamy &lt;code&gt;Create repository&lt;/code&gt;, powinniśmy zostać przeniesieni do naszego repozytorium, które z pewnością swoją złożonością nie przekracza &lt;a href=&quot;https://youtu.be/E8iWVUykvqk?t=2m29s&quot;&gt;efektu matrix’a&lt;/a&gt; robionego za pomocą plików wsadowych (Batch), wita nas plik o nazwie &lt;code&gt;README.md&lt;/code&gt;, a czym do stu diabłów jest rozszerzenie &lt;code&gt;.md&lt;/code&gt;? &lt;code&gt;Markdown&lt;/code&gt;, czyli sposób zapisywania sformatowanych tekstów w lekkiej i przyjemnej formie, co za chwilę zrobimy, ustawiając nasz plik &lt;code&gt;README.md&lt;/code&gt;, który wyświetla informacje na dole pod listą plików znajdujących się w repozytorium. Klikamy w nasz plik i wybieramy po prawej stronie ikonę ołówka:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://blogwpelni.files.wordpress.com/2016/05/github6.png&quot; alt=&quot;Github #1-6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I już naszym oczom ukazuje się jeden ze znaczników Markdown czyli &lt;code&gt;#&lt;/code&gt;, oznaczający Nagłówek pierwszego rzędu (ten największy), no dobrze to napiszmy sobie coś mądrego w naszym pliku wykorzystując najpotrzebniejsze znaczniki:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;# Hello World - Poznajemy GitHub&#39;a!
###Na potrzeby lekcji, uczymy się GitHub&#39;a
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Gdy przejdziemy do zakładki Preview, zobaczymy:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://blogwpelni.files.wordpress.com/2016/05/github7.png&quot; alt=&quot;Github #1-7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Co informuje nas o zaistniałych zmianach, czyli nasza nazwa repozytorium z pokracznej zmieniła się na bardziej czytelnią, a opis został wzbogacony o styl nagłówka rzędu 3 (bo trzy kratki, #, hash’e). Dobrze, wprowadźmy może jakieś przykładowe listy z punktami, odnośniki, pogrubienia, przekreślenia, wszystko co może nam pomóc podczas opisywania repozytorium:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://blogwpelni.files.wordpress.com/2016/05/github8.png&quot; alt=&quot;Github #1-8&quot; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;![GitHub z Furu](https://blogwpelni.files.wordpress.com/2016/05/github.png)

# Hello World - Poznajemy GitHub&#39;a!
### Na potrzeby lekcji, uczymy się GitHub&#39;a

---

Przykładowa lista w opisie repozytorium:
* Element 1 - [link](blogwpelni.wordpress.com)
* Element 2 - [link](github.com/furusenpai)
  * Podelement 1
  * Podelement 2
  * Podelement 3

- [x] Element 3, który został wykonany
- [ ] Element 4, który oczekuje na wykonanie

**Jestem pogrubionym tekstem**

*Jestem pochylonym tekstem*

~~zostałem skreślony~~
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Dokonane przez nas zmiany, możemy teraz opisać i nazwać w polu: &lt;code&gt;Commit changes&lt;/code&gt;, gdzie wpisujemy najważniejsze zmiany jakie zaszły w danym pliku. Wybierając podstawową gałąź czyli &lt;code&gt;Master&lt;/code&gt;. Zapisujemy nasz plik odpowiednim przyciskiem i obserwujemy na stronie głównej naszego repozytorium jak wygląda zapis &lt;code&gt;README.md&lt;/code&gt;. Teraz zajmiemy się utworzeniem kilku folderów i stworzeniem nowej gałęzi. Klikamy &lt;code&gt;create new file&lt;/code&gt;, tworzymy nowy plik o nazwie np. &lt;code&gt;hello.html&lt;/code&gt;, zaś jeśli chcemy utworzyć folder to wpisujemy nazwę &lt;code&gt;folderu&lt;/code&gt; i &lt;code&gt;/&lt;/code&gt;, a potem nazwę pliku jaki ma się znaleźć:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://blogwpelni.files.wordpress.com/2016/05/github9.png&quot; alt=&quot;Github #1-9&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Przykładowo tak jak u mnie. W chwili obecnej niewiele nam daje ten plik, lecz w kolejnej lekcji postaram się pokazać jak zrobić własną stronę WWW na hostingu Github’a, dzięki usłudze GitHub Pages. Teraz dodamy jeszcze nową gałąź!, jeśli znajdujemy się w naszym folderze z plikiem &lt;code&gt;.html&lt;/code&gt;, klikamy przycisk &lt;code&gt;Branch: master&lt;/code&gt; i wpisujemy nazwę dla nowej gałęzi u mnie będzie to np. &lt;code&gt;Stefan&lt;/code&gt;, gdzie zamienię wyraz &lt;code&gt;World&lt;/code&gt; na &lt;code&gt;Stefan&lt;/code&gt; co będzie rzecz jasna bardzo rewolucyjną zmianą, ale to tylko przykład:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://blogwpelni.files.wordpress.com/2016/05/github11.png&quot; alt=&quot;Github #1-10&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Gdy jesteśmy w naszej nowej gałęzi, wybieramy plik &lt;code&gt;hello.html&lt;/code&gt; i klikamy ikonę ołówka, wprowadzamy jakieś zmiany i klikamy &lt;code&gt;preview&lt;/code&gt;. Jak widać zmienione fragmenty z gałęzi master (po lewej) są pokazane jako &lt;code&gt;+&lt;/code&gt; i podświetlone na zielono, zaś to co zostało usunięte z &lt;code&gt;-&lt;/code&gt; i podświetlone na czerwono. Aby mieć lepsze rozeznanie w zmianach możemy wybrać nazwę naszego &lt;code&gt;Commit&#39;a&lt;/code&gt; i kliknąć &lt;code&gt;Commit changes&lt;/code&gt; aby zapisać zmianę, teraz w gałęzi &lt;code&gt;Stefan&lt;/code&gt;, otrzymamy plik &lt;code&gt;hello.html&lt;/code&gt;, który został przez nas zmieniony, gdy wrócimy do gałęzi &lt;code&gt;Master&lt;/code&gt;, nasz plik będzie posiadał podstawowe wartości czyli &lt;code&gt;world&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Tak oto nauczyliśmy się czym jest &lt;code&gt;GitHub&lt;/code&gt; oraz &lt;code&gt;Git&lt;/code&gt;, jak tworzyć repozytoria, dodawać gałęzie, posługiwać się Markdown’em oraz dodawać informacje o zmianach czyli Commit’y, w następnej lekcji poznamy metodę na łączenie (Merge) naszych zmian wprowadzanych w Branch’ach oraz jak przerzucić GitHub’a na komputer, klonowanie i widelcowanie, a tymczasem jak zawsze jeśli podobał Ci się artykuł, założyłeś własne repozytorium i napisałeś chociażby witaj świecie w Markdown lub po prostu doceniasz moje lekcje zostaw ‘Lubię to!’, skomentuj czy udostępnij, a na pewno to docenię, do następnej lekcji w Pełni :&amp;gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;@EDIT:&lt;/code&gt; Dodam jeszcze, że dotychczasowe lekcje związane z Gulp’em możecie sprawdzić pod względem kodu źródłowego w moim repozytorium: &lt;a href=&quot;https://github.com/FuruSenpai/GulpowanieZFuru&quot;&gt;tutaj&lt;/a&gt;, w zależności od lekcji wybieracie odpowiednią gałąź, dla innych lekcji związanych z development’em również będą się pojawiać takie repozytoria.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Artykuł oraz grafiki w nim zawarte są moją własnością - &lt;strong&gt;Furu.Art&lt;/strong&gt; - zakaz kopiowania treści na inne blogi, fanpage czy strony - bo nogi z &lt;em&gt;**&lt;/em&gt; powyrywam!&lt;/p&gt;
</description>
        <pubDate>Mon, 30 May 2016 16:00:00 +0200</pubDate>
        <link>/github-1/</link>
        <guid isPermaLink="true">/github-1/</guid>
        
        <category>branch</category>
        
        <category>cat</category>
        
        <category>code</category>
        
        <category>control</category>
        
        <category>developer</category>
        
        <category>Dla Webdevelopera</category>
        
        <category>front-end</category>
        
        <category>gałęzie</category>
        
        <category>git</category>
        
        <category>github</category>
        
        <category>kodowanie</category>
        
        <category>kot</category>
        
        <category>macki</category>
        
        <category>managment</category>
        
        <category>octopus</category>
        
        <category>ośmiornica</category>
        
        <category>package</category>
        
        <category>system</category>
        
        <category>version</category>
        
        <category>webdeveloper</category>
        
        
        <category>Dla webdeveloper&#39;a</category>
        
      </item>
    
      <item>
        <title>[#2] Rozkładamy Materiał na czynniki pierwsze</title>
        <description>&lt;h3 id=&quot;w-poprzedniej-lekcji-poznalimy-najwaniejsze-prawa-jakimi-rzdzi-si-material-design-dziki-czemu-jest-on-rewolucyjny-w-swojej-dziedzinie-dzi-zajmiemy-si-bezporednim-omwieniem-z-czego-materia-si-skada-i-jak-naley-postrzega-model-materiaowy&quot;&gt;W poprzedniej lekcji poznaliśmy najważniejsze prawa jakimi rządzi się Material Design, dzięki czemu jest on rewolucyjny w swojej dziedzinie. Dziś zajmiemy się bezpośrednim omówieniem z czego Materiał się składa i jak należy postrzegać model Materiałowy.&lt;/h3&gt;

&lt;!--more--&gt;

&lt;p&gt;Materiał jest wielowarstwowy i przestrzenny co już wiemy z poprzedniej lekcji, lecz czym tak na prawdę są te warstwy? Bo przecież to nie chodzi o to, że struktura strony jest jak papier toaletowy i w pewnych miejscach jest cieńszy, a w innych grubszy, chodzi o coś zgoła innego. Mianowicie, trójwarstwowy model Materiału obejmuje w sobie:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;światło&lt;/li&gt;
  &lt;li&gt;materiał (powierzchnię)&lt;/li&gt;
  &lt;li&gt;rzucany cień&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To właśnie z tych trzech elementów, buduje się nasz Material, no dobrze ale o co chodzi, jakie światło, jaki cień i o czym ja w ogóle pierdzielę? Światło, czyli tak zwane ‘Key light’, to nic innego jak założenie, które mówi jak cień powinien się rozchodzić pod naszym materiałem. Rozważmy, że trzymamy kostkę i oświetlamy ją od góry światłem, nasza kostka będzie rzucać cień za sobą i tak właśnie w Material Design’ie to wygląda:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://blogwpelni.files.wordpress.com/2016/05/material6.png&quot; alt=&quot;MaterialDesign #2-1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Cień rzucany przez światło główne (kluczowe), dzięki niemu jesteśmy w interfejsie naszej aplikacji wskazać hierarchię występujących elementów oraz możliwość wykonania jakiejś akcji, ponieważ dany element będzie się wyróżniał na statycznym tle. Oprócz światła głównego istnieje również tzw. &lt;code&gt;Ambient light&lt;/code&gt;, czyli światło otaczające przedmiot. Dzięki niemu otrzymamy cienie delikatne, które pochodzą z każdej strony materiału w przeciwieństwie do światła kluczowego, które daje cień kierunkowy.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://blogwpelni.files.wordpress.com/2016/05/material7.png&quot; alt=&quot;MaterialDesign #2-2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Dobrze, to tyle jeśli chodzi o sprawę trzech warstw w Materiale oraz pojęcie światła i cienia, jest to bardziej teoria, ponieważ podczas bezpośredniego etapu tworzenia sami decydujemy, który cień będzie lepiej wyglądał. Teraz omówię bezpośrednie własności Materiału, jest ich dosyć sporo:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://blogwpelni.files.wordpress.com/2016/05/material8.png&quot; alt=&quot;MaterialDesign #2-3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Od góry do dołu, jaki musi być materiał (będzie trochę nauki słówek z angielskiego):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Solid - wytrzymały, materialny, solidny - musi być widoczny i łatwo rozpoznawalny&lt;/li&gt;
  &lt;li&gt;Occupies unique points in Space - zajmuje unikalne punkty w przestrzeni - każdy element ma swoje określone miejsce&lt;/li&gt;
  &lt;li&gt;Impenetrable - nieprzepuszczalny - przez materiał nic nie ma prawa przenikać&lt;/li&gt;
  &lt;li&gt;Mutable shapes - zmienne kształty - materiał nie musi być zawsze kwadratem czy prostokątem, może być np. kołem, ale nie okręgiem &lt;strong&gt;( ͡° ͜ʖ ͡°)&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Changes in size only along its plane - zmienia rozmiar wyłącznie wzdłuż płaszczyzny - mówiąc szybciej materiał nie rozciągnie się po za obszar w którym występuje, nie ma prawa być szerszy niż jego maksymalny rozmiar&lt;/li&gt;
  &lt;li&gt;Unbendable - nieodkształcalny - materiału nie można złożyć, zwinąć&lt;/li&gt;
  &lt;li&gt;Can join to other material - może łączyć się z innym materiałem - materiały mogą być połączone, nie muszą być oddzielone od siebie&lt;/li&gt;
  &lt;li&gt;Can separate, split, and heal - mogą się rozdzielać, oddzielać i (bliźnić, goić, kurować, jak dla mnie po prostu łączyć powtórnie po rozdzieleniu, nie wiem za bardzo czemu Google wybrało akurat wyraz ‘heal’ tutaj, no ale cóż)&lt;/li&gt;
  &lt;li&gt;Can be created or destroyed - mogą być tworzone lub niszczone - pod wpływem pewnych akcji ‘Materiał’ może się pojawić (stworzyć) oraz po innej akcji może zniknąć (zniszczyć się)&lt;/li&gt;
  &lt;li&gt;Move along any axis - porusza się wzdłuż dowolnej osi - poruszanie materiału może odbywać się poziomo, pionowo oraz w głąb&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Uff, lekcja z angielskiego odbębniona i mniej więcej wytłumaczyłem przy okazji co dana własność wnosi do tworzenia. Wszystkie te cechy musi spełniać materiał, aby był idealnie materiałowy? (tak wiem, masło maślane, mydło mydlane). Jest to mniej więcej również czysta teoria, jednakże tutaj zawiera pewne myśli przewodnie, którymi należy się kierować i których łamać nie wolno. Z dodatkowych zależności, Materiał ma określoną grubość i nie może jej zmieniać! Tak zwane &lt;code&gt;1 dp(Density-independent pixels)&lt;/code&gt;, czyli jednostka wprowadzona przez Google, która dosłownie tłumacząc oznacza gęstość niezależną pikseli, o której szerzej można sobie poczytać &lt;a href=&quot;https://www.google.com/design/spec/layout/units-measurements.html#units-measurements-density-independent-pixels-dp-&quot;&gt;tutaj&lt;/a&gt;, ponieważ niewiele nam to wnosi jeśli chodzi o projektowanie stron w nurcie Material Design, ponieważ gęstość pikseli jaką wykorzystujemy w przeglądarce to &lt;code&gt;72 dpi&lt;/code&gt; (dot per inch, punkt na cal), zaś jednostki &lt;code&gt;dp&lt;/code&gt; odnoszą się do wyświetlaczy z gęstszą siatką pikseli wobec tego nie uważam tego za potrzebne i wymagane do wytłumaczenia. Wizualnie grubość materiału przedstawia się tak:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://blogwpelni.files.wordpress.com/2016/05/material9.png&quot; alt=&quot;MaterialDesign #2-4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Jak widać po lewej stronie jest prawidłowa ujednolicona grubość materiału, zaś po prawej zmienna wartość grubości materiału co jest błędem. Pokażę teraz na czym polega idea solidnego, nieprzepuszczalnego i nieprzenikalnego materiału:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://blogwpelni.files.wordpress.com/2016/05/material10.png&quot; alt=&quot;MaterialDesign #2-5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Tak jak pisałem wyżej, akcje wykonywane na materiale nie mogą wychodzić za przestrzeń materiału (ani pod niego o czym mowa na obrazku po prawej).&lt;/p&gt;

&lt;p&gt;O wszystkich wyżej wymienionych cechach możecie sobie dokładnie poczytać i przejrzeć wraz z animacjami &lt;a href=&quot;https://www.google.com/design/spec/what-is-material/material-properties.html#material-properties-transforming-material&quot;&gt;tutaj&lt;/a&gt;, chciałbym móc wstawić po prostu filmiki wewnątrz wpisu jednakże darmowy hosting od wordpress’a mi na to nie pozwala, chyba że zapłacę niebotyczną kwotę na miesiąc za odblokowanego wordpress’a… Co wydaje mi się śmieszne, więc zbieram póki co na zewnętrzny hosting. A jeśli chodzi o rozbiór materiału to myślę, że tyle wystarczy w następnej lekcji zajmiemy się bezpośrednio ruchem w materiale oraz być może układem, a tymczasem jak zawsze jeśli podobał Ci się artykuł, zachęciłem Cię do nauki nurtu materiałowego lub chcesz docenić moją twórczość zostaw ‘Lubię to!’, napisz komentarz albo udostępnij artykuł, aby dotarł do szerszego grona, za co bardzo dziękuję, do następnej lekcji w Pełni! :&amp;gt;&lt;/p&gt;

&lt;h4 id=&quot;edit-post-przenoszony-z-wordpresscom-w-przyszoci-nastpi-modyfikacja-wpisu-i-dodanie-filmw&quot;&gt;@EDIT: Post przenoszony z wordpress.com, w przyszłości nastąpi modyfikacja wpisu i dodanie filmów.&lt;/h4&gt;

&lt;hr /&gt;

&lt;p&gt;Artykuł oraz część grafik w nim są moją własnością - &lt;strong&gt;Furu.Art&lt;/strong&gt; - zakaz kopiowania treści na blogi, fanpage czy strony - bo nogi z &lt;em&gt;**&lt;/em&gt; powyrywam!&lt;/p&gt;
</description>
        <pubDate>Sun, 29 May 2016 14:00:00 +0200</pubDate>
        <link>/material-2/</link>
        <guid isPermaLink="true">/material-2/</guid>
        
        <category>design</category>
        
        <category>Dla Webdesignera</category>
        
        <category>google</category>
        
        <category>material</category>
        
        <category>projektowanie</category>
        
        <category>warstwy</category>
        
        <category>webdesign</category>
        
        
        <category>Dla webdesigner&#39;a</category>
        
      </item>
    
      <item>
        <title>[#2] Gulp&#39;owanie z Furu - szczyt leniwości i pierwsza strona</title>
        <description>&lt;h3 id=&quot;wstp-dzi-bdzie-krtki-i-zwizy-poniewa-nie-chc-traci-miejsca-potrzebnego-wytumaczenia-podstaw-jadehtml-oraz-sasscss-z-wykorzystanych-przepisw-poprzedniej-lekcji-dzisiaj-bdziemy-tworzy-mikstury&quot;&gt;Wstęp dziś będzie krótki i zwięzły, ponieważ nie chcę tracić miejsca potrzebnego wytłumaczenia podstaw Jade/Html oraz Sass/Css, z wykorzystanych przepisów poprzedniej lekcji, dzisiaj będziemy tworzyć mikstury.&lt;/h3&gt;

&lt;!--more--&gt;

&lt;p&gt;Ostatnim elementem, który pozwoli nam osiągnąć szczyt lenistwa będzie konfiguracja serwera &lt;code&gt;Livereload&lt;/code&gt;, odpowiedzialnego za przetwarzanie w czasie rzeczywistym zmian plików bez konieczności odświeżania przeglądarki. Przechodzimy do &lt;code&gt;gulpfile.js&lt;/code&gt;, gdzie w miejscu w którym mamy zapisane polecenie &lt;code&gt;Jade&lt;/code&gt; i modyfikujemy je:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://blogwpelni.files.wordpress.com/2016/05/screen-gulp-141.png&quot; alt=&quot;Gulp&#39;owanie #2-1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Pod &lt;code&gt;gulp.dest&lt;/code&gt; wstawiamy: &lt;code&gt;.pipe(connect.reload());&lt;/code&gt; dzięki któremu nasz serwer będzie odświeżał automatycznie pliki Jade, robimy dokładnie to samo w poleceniu Sass. Usuwamy poprzednio utworzone polecenie &lt;code&gt;sass:watch&lt;/code&gt;, ponieważ zastąpimy je zbiorowym poleceniem &lt;code&gt;watch&lt;/code&gt;, które będzie się odnosiło do wszystkich naszych plików. Tworzymy je dokładnie tak jak powyżej, &lt;code&gt;gulp.watch([&#39;lokalizaja folderu z plikami&#39;], [&#39;nazwa polecenia&#39;]);&lt;/code&gt; oczywiście aby wszystko działało jak należy musimy jeszcze do gulp.task(‘default’) dodać nazwę polecenia &lt;code&gt;watch&lt;/code&gt;. Jeśli wszystko zrobiliśmy jak należy, powinniśmy zobaczyć, po wpisaniu w konsolę polecenia &lt;code&gt;gulp&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://blogwpelni.files.wordpress.com/2016/05/screen-gulp-15.png&quot; alt=&quot;Gulp&#39;owanie #2-2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Przystępujemy do tworzenia naszej strony WWW, wchodzimy do folderu &lt;code&gt;jade&lt;/code&gt; i w pliku &lt;code&gt;index.jade&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-jade&quot;&gt;doctype html

html(lang=&#39;pl&#39;)
head
meta(charset=&#39;utf-8&#39;)
title Moja pierwsza strona WWW
link(rel=&#39;stylesheet&#39;, href=&#39;css/main.css&#39;)
body
  h1 Moja pierwsza strona WWW
  p Zrobiona w Jade
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Dobrze, ale co my tutaj mamy? &lt;code&gt;doctype html&lt;/code&gt; to po prostu strona kodowa dokumentu, nie jest to zbyt istotne aby się zagłębiać czemu to służy, w skrócie definiuje że nasza strona to html, dalej &lt;code&gt;html&lt;/code&gt; to znacznik oznaczający obszar naszej strony, zawiera w sobie wszystkie dalsze elementy, dodatkowo dodałem opcję &lt;code&gt;lang&lt;/code&gt;, aby określić docelowy język naszej strony. &lt;code&gt;head&lt;/code&gt; czyli znacznik nagłówka strony, tutaj zawarte są podstawowe ustawienia na temat strony, czyli tzw. &lt;code&gt;meta&lt;/code&gt; tagi, pełną listę użytecznych meta tagów możecie sobie podejrzeć &lt;a href=&quot;https://gist.github.com/kevinSuttle/1997924&quot;&gt;Tutaj&lt;/a&gt;, gdzie przekładając je na język Jade, będzie to wyglądać np. &lt;code&gt;meta(name=&#39;&#39;, content=&#39;&#39;)&lt;/code&gt;. Dobrze, ale co robi &lt;code&gt;charset=&#39;utf-8&#39;&lt;/code&gt;, ustala kodowanie znaków na stronie, utf-8, czyli dzięki niemu strona będzie obsługiwać wszystkie znaki, w tym nasze litery z ogonkami. &lt;code&gt;title&lt;/code&gt; czyli tytuł naszej strony wyświetlany na pasku karty w przeglądarce, &lt;code&gt;link&lt;/code&gt; pozwala dołączyć do strony pliki związane z wyglądem, bądź rozszerzeniem funkcji strony, tutaj dodaję mój plik css zawarty w folderze &lt;code&gt;css&lt;/code&gt;, gdzie &lt;code&gt;rel&lt;/code&gt; oznacza relację między plikiem, a stroną (nie wymaga to większego wytłumaczenia, bo nie bardzo się przyda ta wiedza podczas tworzenia stron), a &lt;code&gt;href&lt;/code&gt; to odnośnik gdzie znajduje się nasz plik do dodania. Tak oto opuszczamy sekcję &lt;code&gt;head&lt;/code&gt; naszej strony i przechodzimy do ciała, czyli &lt;code&gt;body&lt;/code&gt;, w tej sekcji są dopiero wyświetlane wprowadzane przez nas elementy na stronie, sekcja head oraz html jest niewidoczna na stronie. Na początek uznałem, że napiszemy sobie na stronie nagłówek tekstowy o największym rozmiarze czyli &lt;code&gt;h1&lt;/code&gt;, a pod nim akapit &lt;code&gt;p&lt;/code&gt; czyli wydzieloną linijkę tekstu o podstawowym dla przeglądarki kroju. Jeśli wszystko zrobiliśmy prawidłowo, zapisujemy nasz plik i otwieramy adres wskazany przez konsolę jako localhost wraz z portem, naszym oczom powinno się ukazać:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://blogwpelni.files.wordpress.com/2016/05/screen-gulp-16.png&quot; alt=&quot;Gulp&#39;owanie #2-3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;No dobrze, ale gdzie ta cała magia o której mówiłem, że nic nie trzeba odświeżać? Zmieńcie cokolwiek znajdującego się w sekcji body, np. tekst jaki znajduje się w &lt;code&gt;h1&lt;/code&gt; i zapiszcie plik, gdy powrócicie do przeglądarki powinniście otrzymać tekst, który przed chwilą wpisaliście&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://blogwpelni.files.wordpress.com/2016/05/screen-gulp-17.png&quot; alt=&quot;Gulp&#39;owanie #2-4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Nasz kod zmienia się teraz całkowicie na bieżąco, tylko i wyłącznie przy pomocy zapisywania pliku! Prawdziwa gratka dla leniuchów (mnie). No dobrze, ale nie wygląda to zbyt powalająco, może spróbujemy jakoś upiększyć naszą pierwszą stronę? Zacznijmy od chociażby zmiany font’u, tła na stronie:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://blogwpelni.files.wordpress.com/2016/05/screen-gulp-18.png&quot; alt=&quot;Gulp&#39;owanie #2-5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Przechodzimy do pliku, który mamy w folderze &lt;code&gt;sass&lt;/code&gt; i tutaj znacznik, który mamy w naszym pliku &lt;code&gt;index.jade&lt;/code&gt;, czyli w moim przypadku body, ponieważ chcę aby tło całej strony było w takim kolorze, teksty w kolorze białym, zaś font należał do krojów bezszeryfowych (szerzej o krojach szeryfowych i bezszeryfowych &lt;a href=&quot;https://pl.wikipedia.org/wiki/Krój_pisma&quot;&gt;Tutaj&lt;/a&gt;). W pliku wybieram selektor, który otwieram klamrą (selektor czyli nazwa elementu zawartego na stronie), następnie wewnątrz klamry umieszczam własności (nazwa predefiniowanej przez W3C funkcji(?), która odpowiada za dany efekt wizualny) &lt;code&gt;background&lt;/code&gt; (czyli tło), &lt;code&gt;font-family&lt;/code&gt; (czyli krój fontu), &lt;code&gt;color&lt;/code&gt; (czyli kolor tekstu), po własnościach stawiam dwukropki i podaję ich cechy (parametr, który występuje dla danej funkcji, np. background: nazwa koloru/zapis koloru w rgb) &lt;code&gt;rebeccapurple&lt;/code&gt;(zdefiniowana przez W3C nazwa koloru) &lt;code&gt;sans-serif&lt;/code&gt;(font bezszeryfowy), &lt;code&gt;#fff&lt;/code&gt;(kolor biały w skróconym zapisie &lt;a href=&quot;https://pl.wikipedia.org/wiki/Kolory_w_Internecie#Zapis_szesnastkowy&quot;&gt;heksadecymalnym&lt;/a&gt;). Zapisuję mój plik &lt;code&gt;main.scss&lt;/code&gt; i tak jak mógłbym się tego spodziewać:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://blogwpelni.files.wordpress.com/2016/05/screen-gulp-19.png&quot; alt=&quot;Gulp&#39;owanie #2-6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;W dalszych lekcjach, gdzie będziemy bezpośrednio ostylowywali elementy, tak aby nasza strona była po prostu dobrze zrobiona, zalecam zapoznanie się z dostępnymi własnościami i ich cechami (ang: &lt;a href=&quot;http://www.w3schools.com/css/default.asp&quot;&gt;Tutaj&lt;/a&gt;, pl: &lt;a href=&quot;http://www.kurshtml.edu.pl/css/&quot;&gt;Tutaj&lt;/a&gt; ponieważ będzie to niezbędne przy dalszych operacjach. Teraz zajmiemy się stworzeniem tak zwanego kontenera, którego znaczenie opisywałem w jednej z poprzednich lekcji &lt;a href=&quot;/jezyk-developera/&quot;&gt;tutaj&lt;/a&gt;, w nim zawrzemy najważniejsze elementy opisujące sekcje, wprowadzę pojęcie klasy elementu i zrobimy szybkie przygotowanie pod &lt;code&gt;RWD&lt;/code&gt; (responsive web design - responsywny design strony - strona będzie wyświetlana tak samo dobrze na każdym urządzeniu). Do roboty!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://blogwpelni.files.wordpress.com/2016/05/screen-gulp-20.png&quot; alt=&quot;Gulp&#39;owanie #2-7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Wyrzucam poprzednie wypociny związane z wypisaniem prostego tekstu, takie &lt;a href=&quot;https://pl.wikipedia.org/wiki/Hello_world&quot;&gt;Hello world!&lt;/a&gt; nas nie interesuje za bardzo… W sekcji &lt;code&gt;head&lt;/code&gt; dodaję nowy znacznik meta, o nazwie &lt;code&gt;viewport&lt;/code&gt; i treści &lt;code&gt;width=device-width, initial-scale=1.0&lt;/code&gt;. Viewport czyli w jaki sposób strona jest wyświetlana w zależności od urządzenia, zaś w content umieszczam &lt;code&gt;width=device-width&lt;/code&gt; czyli szerokość strony, w zależności od urządzenia dopasowuje się do szerokości urządzenia, zaś &lt;code&gt;initial-scale=1.0&lt;/code&gt;, oznacza że skalowanie strony na urządzeniu będzie rzeczywiste &lt;code&gt;1:1&lt;/code&gt;, czyli to co ustawimy sobie w przeglądarce i na komputerze u nas będzie wyglądało perfekcyjnie, na telefonie też będzie, gdy nie zrobimy tego, strona na telefonie zostanie pomniejszona do urządzenia przez co całość będzie wyglądać po prostu źle. Dobrze, teraz zajmiemy się nieco prawidłową segregacją w folderze &lt;code&gt;sass&lt;/code&gt;, tak aby całość była jak najbardziej zorganizowana. Tutaj pomocnym będzie znajomość polecenia &lt;code&gt;@import&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://blogwpelni.files.wordpress.com/2016/05/screen-gulp-21.png&quot; alt=&quot;Gulp&#39;owanie #2-8&quot; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;@import &#39;setup&#39;;
@import &#39;vars&#39;;
@import &#39;mixins&#39;;
@import &#39;rwd&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;W naszym folderze &lt;code&gt;sass&lt;/code&gt; dodaję pliki o nazwach: &lt;code&gt;_setup.scss&lt;/code&gt;, &lt;code&gt;_vars.scss&lt;/code&gt;, &lt;code&gt;_mixins.scss&lt;/code&gt;, &lt;code&gt;_rwd.scss&lt;/code&gt;. Teraz co dany plik ma za zadanie robić? &lt;code&gt;Setup&lt;/code&gt;, będzie zawierał wszystkie właściwości podstawowe dla selektorów, związane z wymiarem (o czym kiedy indziej), będzie zawierał tak jakby właściwości opisujące szkielet naszej strony. &lt;code&gt;vars&lt;/code&gt;, będzie przechowywał wszystkie przypisane przez nas zmienne, np. &lt;code&gt;kolory&lt;/code&gt;, &lt;code&gt;fonty&lt;/code&gt;, &lt;code&gt;wartości&lt;/code&gt;. &lt;code&gt;Mixins&lt;/code&gt;, zajmie się kolekcjonowaniem wszystkich rozbudowanych funkcji, które będziemy mogli przypisywać do poszczególnych selektorów w celu zaoszczędzenia miejsca i czasu przede wszystkim. Zaś &lt;code&gt;rwd&lt;/code&gt;, to wszystkie ustawienia potrzebne do stworzenia strony responsywnej. Wszystkie te pliki importujemy poprzez &lt;code&gt;main.scss&lt;/code&gt;, poleceniem &lt;code&gt;@import &#39;nazwaPliku&#39;;&lt;/code&gt; jak widzicie nie istotne jest rozszerzenie tego pliku, Sass’a to nie obchodzi, ważne żeby plik, który chcemy dodać był z potocznie nazywaną podłogą lub prawidłowo &lt;code&gt;Makronem dolnym&lt;/code&gt;. Jako, że lekcja wygląda już na dosyć długą, dorzucę jeszcze podstawowe elementy na stronie w pliku &lt;code&gt;index.jade&lt;/code&gt;, które już w następnej lekcji będziemy ustawiać odpowiednio:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://blogwpelni.files.wordpress.com/2016/05/screen-gulp-22.png&quot; alt=&quot;Gulp&#39;owanie #2-9&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;.container&lt;/code&gt; - czyli nasz kontener, który będzie zawierał wszystkie elementy na stronie&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;.row&lt;/code&gt; - nieodłączny kompan kontenera&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;header&lt;/code&gt; - nagłówek strony&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;h1&lt;/code&gt; - nagłówek najwyższego rzędu&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;nav&lt;/code&gt; - element zawierający nawigację (menu) na stronie&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;a&lt;/code&gt; - odnośnik, link z miejscem docelowym pustym ‘#’&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;section&lt;/code&gt; - sekcja, służy do łatwego rozeznania co znajduje się na stronie&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;.hero&lt;/code&gt; - klasa elementu blokowego, która będzie wiadomością powitalną na stronie&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;p&lt;/code&gt; - akapit tekstowy&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;button&lt;/code&gt; - przycisk akcji, tutaj z klasą check, która będzie odpowiedzialna za przejście do sekcji Galerii / Portfolio&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;.about&lt;/code&gt; - klasa elementu blokowego, która będzie zawierała informacje o autorze takie ikonki i krótkie informacje o usługach&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;.aboutIcon&lt;/code&gt; - klasa elementu blokowego, która będzie zawierała bezpośrednio elementy ‘O mnie’&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;img&lt;/code&gt; - element obrazkowy, graficzny, src - miejsce i nazwa pliku gdzie się znajduje, alt - tekst wyświetlany w przypadku braku grafiki&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;.col-4&lt;/code&gt; - klasa elementu blokowego, który w naszym rwd będzie odpowiedzialny za rozmieszczenie na stronie (dokładniej w następnej lekcji)&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-jade&quot;&gt;doctype html
html(lang=&#39;pl&#39;)
head
meta(charset=&#39;UTF-8&#39;)
meta(name=&#39;viewport&#39;, content=&#39;width=device-width, initial-scale=1.0&#39;)
title Moja pierwsza strona WWW
link(rel=&#39;stylesheet&#39;, href=&#39;css/main.css&#39;)
body
  .container
    .row
      header

        h1 Moja pierwsza responsywna strona WWW

        nav
          a(href=&#39;#&#39;) Menu1
          a(href=&#39;#&#39;) Menu2
          a(href=&#39;#&#39;) Menu3
          a(href=&#39;#&#39;) Menu4

    section.hero
      h1 Jestem bohaterem tej strony
      p Krótki tekst rozpoczynający na stronie
      button.check Sprawdź mnie

    section.about
      .col-4
        .aboutIcon
          img(src=&#39;icon.png&#39;, alt=&#39;icon 32x32&#39;)
          h2 O mnie nagłówek
          p krótki opis o mnie

    section.about
      .col-4
        .aboutIcon
          img(src=&#39;icon.png&#39;, alt=&#39;icon 32x32&#39;)
          h2 O mnie nagłówek
          p krótki opis o mnie

    section.about
      .col-4
        .aboutIcon
          img(src=&#39;icon.png&#39;, alt=&#39;icon 32x32&#39;)
          h2 O mnie nagłówek
          p krótki opis o mnie

    section.about
      .col-4
        .aboutIcon
          img(src=&#39;icon.png&#39;, alt=&#39;icon 32x32&#39;)
          h2 O mnie nagłówek
          p krótki opis o mnie
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Myślę, że ta lekcja zajęła już i tak dosyć sporo przestrzeni, więc czas ją zakończyć, nauczyliśmy się pisać podstawowe strony w Jade, delikatnie ostylowywać je Sass’em oraz całość przeładowywać bez konieczności odświeżania przeglądarki, w następnej zajmiemy się RWD i postaram się przygotować w formie dodatkowej, wygląd tego co będziemy próbowali zakodować, bo jednak łatwiej jest kodować coś co się widzi! A tymczasem, jak zawsze jeśli podobał Ci się artykuł, zachęciłem Cię do tworzenia własnych stron lub po prostu podoba Ci się sposób w jaki piszę zostaw ‘Lubię to!’ w celu zwiększenia mojej motywacji do dalszego nauczania, komentarze mile widziane i do zobaczenia w Pełni! :&amp;gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Artykuł oraz grafiki w nim zawarte są moją własnością - &lt;strong&gt;Furu.Art&lt;/strong&gt; - zakaz kopiowania treści na inne blogi, fanpage czy strony - bo nogi z &lt;em&gt;**&lt;/em&gt; powyrywam!&lt;/p&gt;
</description>
        <pubDate>Thu, 26 May 2016 16:00:00 +0200</pubDate>
        <link>/gulp-2/</link>
        <guid isPermaLink="true">/gulp-2/</guid>
        
        <category>code</category>
        
        <category>console</category>
        
        <category>css</category>
        
        <category>developer</category>
        
        <category>Dla Webdevelopera</category>
        
        <category>front-end</category>
        
        <category>gulp</category>
        
        <category>html</category>
        
        <category>jade</category>
        
        <category>javascript</category>
        
        <category>konsola</category>
        
        <category>node</category>
        
        <category>npm</category>
        
        <category>pipes</category>
        
        <category>sass</category>
        
        <category>web</category>
        
        <category>webdeveloper</category>
        
        <category>webmaster</category>
        
        
        <category>Dla webdeveloper&#39;a</category>
        
      </item>
    
      <item>
        <title>Przenosimy szkice do programu graficznego - header + article</title>
        <description>&lt;h3 id=&quot;poprzednio-nauczylimy-si-budowa-szkielety-stron-www-rzecz-jasna-na-kartce-przy-pomocy-owka-dzisiaj-zajmiemy-si-nastpnym-krokiem-w-procesie-projektowania-czyli-przetworzymy-nasze-bazgroy-w-programie-graficznym-tworzc-interaktywny-szkielet-ktry-bdziemy-mogli-modyfikowa-dowolnie-gdy-co-wizualnie-nie-bdzie-si-zgadzao&quot;&gt;Poprzednio nauczyliśmy się budować Szkielety stron WWW, rzecz jasna na kartce, przy pomocy ołówka, dzisiaj zajmiemy się następnym krokiem w procesie projektowania, czyli przetworzymy nasze bazgroły w programie graficznym, tworząc interaktywny Szkielet, który będziemy mogli modyfikować dowolnie gdy coś wizualnie nie będzie się zgadzało.&lt;/h3&gt;

&lt;!--more--&gt;

&lt;p&gt;Jeśli nie mamy zaległości i przećwiczyliśmy &lt;a href=&quot;/design-na-kartce-0/&quot;&gt;proces tworzenia na kartce&lt;/a&gt;, pora zabrać się za kolejny etap pracy projektanta stron WWW, czyli wdrożenie do programu graficznego. Zaznaczam, że w tej lekcji wymagana jest elementarna wiedza na temat obsługi programu Adobe Photoshop, lista narzędzi oraz poleceń jakimi trzeba się posługiwać:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Tworzenie nowych dokumentów, ustawianie wymiarów dokumentu&lt;/li&gt;
  &lt;li&gt;Znajomość poleceń ALT+CTRL+Z oraz SHIFT + CTRL + Z&lt;/li&gt;
  &lt;li&gt;Zmienianie wymiarów obszaru roboczego w czasie pracy&lt;/li&gt;
  &lt;li&gt;Tworzenie linii pomocniczych&lt;/li&gt;
  &lt;li&gt;Tworzenie nowych warstw, tworzenie nowych warstw wraz z wypełnieniem&lt;/li&gt;
  &lt;li&gt;Grupowanie warstw, nazywanie ich, zmiana nazw plików&lt;/li&gt;
  &lt;li&gt;Posługiwanie narzędziem przemieszczania (Move tool)&lt;/li&gt;
  &lt;li&gt;Posługiwanie narzędziem zaznaczania prostokątnego&lt;/li&gt;
  &lt;li&gt;Posługiwanie narzędziem tworzenia kształtów&lt;/li&gt;
  &lt;li&gt;Posługiwanie narzędziem służącym do wprowadzania tekstu&lt;/li&gt;
  &lt;li&gt;Posługiwanie paletą kolorów oraz przybornikiem&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Dobrze, to bez większego owijania w bawełnę, przystępujemy do pracy (dziś będzie bardzo obrazkowo), tworzymy nowy dokument o wymiarach np. &lt;code&gt;960 x 1000 [px]&lt;/code&gt;. Tworzymy nowe linie pomocnicze na ustawieniach: Pionowo: &lt;code&gt;0%; 50%; 100%&lt;/code&gt;; oraz Pionowo: &lt;code&gt;20px; 460px; 500px; 940px&lt;/code&gt;; Powinno to wyglądać tak:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://blogwpelni.files.wordpress.com/2016/05/projektowaniekomputer-1.png&quot; alt=&quot;DesignNaKartce #1-1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Teraz zdefiniujmy sobie 2 odcienie szarości, jeden będzie nam służył do oznaczania bloków, sekcji, drugi do przycisków akcji, tekstów i tym podobnych. Kolor pierwszoplanowy ustawiam na: &lt;span style=&quot;color:#dedede;&quot;&gt;&lt;strong&gt;#dedede&lt;/strong&gt;&lt;/span&gt;, drugoplanowy na: &lt;span style=&quot;color:#838383;&quot;&gt;&lt;strong&gt;#838383&lt;/strong&gt;&lt;/span&gt;. W ten sposób odzwierciedlimy ideę ołówka, jednakże teraz będziemy mogli zamiast zmazywania i robienia koślawych prostokątów czy kółek, dowolnie przesuwać, usuwać, precyzyjnie wymierzone kształty. Dobrze, ale tak właściwie co ja będę robił, jaki szkic wdrożę do Photoshopa? A no dokładnie to co w ostatniej lekcji odnośnie projektowania na kartce przedstawiłem jak finalny rezultat:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://blogwpelni.files.wordpress.com/2016/05/projekt.png&quot; alt=&quot;DesignNaKartce #1-2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Także, zaczynamy od góry i skończymy na dole! (co wydaje się całkiem logiczne…) W moim kontenerze znajduje się nagłówek strony czyli tak zwany Header, który zawiera tytuł strony lub logo po lewej, zaś po prawej uproszczone Menu, czyli odnośniki po prostu. Czas przerzucić to na Photoshopa. Mniej więcej na oko ustalam sobie, że mój Header ma wymiary &lt;code&gt;100% x 170px&lt;/code&gt;, więc zaznaczam sobie taką wartość za pomocą linii pomocniczych, można przeciągając Move tool’em z wciśniętym &lt;code&gt;Shift&#39;em&lt;/code&gt;, aby przesunięcie odbywało się równo co &lt;code&gt;10 px&lt;/code&gt; (Działa to przy każdym elemencie, zarówno podczas przesuwania strzałkami jak i myszą). Zaznaczamy narzędziem zaznaczania prostokątnego od góry do utworzonej przez nas linii pomocniczej. Wypełniamy zaznaczenie kolorem białym, jeśli takiego koloru mamy tło, dla lepszego rozeznania możemy ten element nazwać ‘Header’&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://blogwpelni.files.wordpress.com/2016/05/projektowaniekomputer-21.png&quot; alt=&quot;DesignNaKartce #1-3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Dalej przystępujemy do dodania Tytułu oraz linków. Tworzę za pomocą narzędzia tekstu, jakikolwiek tekst o rozmiarze np. 36px oraz 4 teksty, które będą służyły za linki w rozmiarze np. 18px, koloru czarnego lub drugiej barwy z próbnika. Utworzone elementu ustawiam odpowiednie, Tytuł wyśrodkowuje w poziomie (CTRL + Lewy przycisk myszy na miniaturce obok nazwy warstwy. &lt;img src=&quot;https://blogwpelni.files.wordpress.com/2016/05/projektowaniekomputer-4.png&quot; alt=&quot;DesignNaKartce #1-4&quot; /&gt;,
następnie &lt;img src=&quot;https://blogwpelni.files.wordpress.com/2016/05/projektowaniekomputer-5.png&quot; alt=&quot;DesignNaKartce #1-5&quot; /&gt;, wybieramy 2 ikonkę od lewej, który mówi nam o wyśrodkowaniu w pionie, po prawej opcje odnośnie ustawiania pionowego, Początek obszaru, Środek, Koniec) oraz ustawiam przy drugiej linii pomocniczej, zaś 4 linki od menu rozdzielam między sobą o 30 px i wyśrodkowuje w prawej części Header’a, powinno wyglądać to mniej więcej tak:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://blogwpelni.files.wordpress.com/2016/05/projektowaniekomputer-3.png&quot; alt=&quot;DesignNaKartce #1-6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Całość dodatkowo grupuję, Header -&amp;gt; Menu. Co widzę dalej? Dalej widzę posty oraz obok pasek z jakąś listą czy innymi elementami, do dzieła! Tworzę nową grupę &lt;code&gt;Article&lt;/code&gt;, w której umieszczam grupy: &lt;code&gt;Header&lt;/code&gt;, &lt;code&gt;Content&lt;/code&gt;, &lt;code&gt;Footer&lt;/code&gt;. W grupie Article zaznaczam sobie obszar który będzie moją główną częścią strony, u mnie jest to z początku &lt;code&gt;460 x 685 [px]&lt;/code&gt;, z początku ponieważ będę mógł później dowolnie zmieniać szerokość i wysokość. W zaznaczonym obszarze dodaję wypełnienie pierwszoplanowe i nazywam warstwę ArticleBody (czyli ciało artykułu)  i w grupie Header, zaznaczam sobie od samej góry 70px i wypełniam je kolorem ArticleBody nazywając powstałą warstwę ArticleHeader, dodaję tekst &lt;code&gt;Article Header&lt;/code&gt; w rozmiarze 22px i kolorze czarnym (#000000), wyśrodkowuje tekst względem warstwy ArticleHeader, pionowo i poziomo. Następnie w grupie Content wstawiam element, który będzie przechowywał grafikę, więc nazwałem go po prostu Image, zaznaczam 240px w dół od końca ArticleHeader i wypełniam zaznaczenie kolorem drugoplanowym, ciemniejszym, wstawiam tekst &lt;code&gt;Image&lt;/code&gt; w kolorze białym (#ffffff) i wyśrodkowuje go względem warstwy Image, grupuję te 2 elementy. Wracając do grupy Conent, tworzę sobie 3 teksty które będą pełniły funkcję opisującą posta, data, kategoria, autor. Wstawiając odpowiednie ikonki, które można znaleźć &lt;a href=&quot;/material-1/&quot;&gt;tutaj&lt;/a&gt;, rozmiar ikonek to 18 x 18 [px], grupuję teksty z ikonkami w grupy o nazwach funkcji czyli: &lt;code&gt;Date&lt;/code&gt;, &lt;code&gt;Category&lt;/code&gt;, &lt;code&gt;Author&lt;/code&gt;. Całość znajduje się 20 px poniżej Image, pod ikonkami dodaję dowolny tekst w kolorze czarnym, u mnie Lorem ipsum. Pod tekstem tworzę przycisk akcji o nazwie &lt;code&gt;Read more&lt;/code&gt;, umieszczając go w grupie o takiej samej nazwie, tworzę go przy pomocy narzędzia kształtu i zaokrąglonego prostokąta (zaokrąglenie 6px), tekst wyśrodkowuje względem przycisku. Opuszczam grupę Content i wchodzę do Footer, gdzie dodaję 2 ikonki i 2 teksty, informujące o ilości komentarzy oraz tagów dodanych do posta, całość znajduje się 20 px wyżej od końca ArticleBody. Całość powinna wyglądać mniej więcej tak.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://blogwpelni.files.wordpress.com/2016/05/projektowaniekomputer-6.png&quot; alt=&quot;DesignNaKartce #1-7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Jak widzimy nasz post jest dosyć wąski, więc możemy go po prostu rozszerzyć wybierając, zmieniając szerokość poszczególnych warstw i modyfikując nieco linie pomocnicze:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://blogwpelni.files.wordpress.com/2016/05/projektowaniekomputer-7.png&quot; alt=&quot;DesignNaKartce #1-8&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I tak oto stworzyliśmy nasz Szkic w programie, rzecz jasna jest to dopiero szkic artykułu i nagłówka strony, ale daje to już wgląd w dalsze działania, do czego zachęcam, ponieważ lekcja ta zajmuje już nieco miejsca, uważam że w tym miejscu ją zakończę! Prawdopodobnie dodam coś w formie Dodatku, Uzupełnienia odnośnie tego wpisu, gdzie wdrażam Pasek boczny z widget’ami oraz stopkę, ponieważ w następnej lekcji zajmiemy się już bezpośrednio gotowym produktem, doborem barw i detalami, bo najzwyczajniej nie wyrobię się z całością dzisiaj, a tymczasem jeśli artykuł Ci się podobał zostaw ‘Lubię to!’, zachęcam do komentowania i do następnej lekcji w Pełni! :&amp;gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Artykuł oraz grafiki w nim zawarte są moją własnością - &lt;strong&gt;Furu.Art&lt;/strong&gt; - zakaz kopiowania treści zawartej w artykule, bo nogi z &lt;em&gt;**&lt;/em&gt; powyrywam!&lt;/p&gt;
</description>
        <pubDate>Wed, 25 May 2016 16:00:00 +0200</pubDate>
        <link>/design-na-kartce-1/</link>
        <guid isPermaLink="true">/design-na-kartce-1/</guid>
        
        <category>design</category>
        
        <category>Dla Webdesignera</category>
        
        <category>layers</category>
        
        <category>narzędzia</category>
        
        <category>photoshop</category>
        
        <category>projektowanie</category>
        
        <category>ps</category>
        
        <category>psd</category>
        
        <category>sketch</category>
        
        <category>szkic</category>
        
        <category>tools</category>
        
        <category>warstwy</category>
        
        <category>webdesign</category>
        
        <category>wireframe</category>
        
        
        <category>Dla webdesigner&#39;a</category>
        
      </item>
    
      <item>
        <title>[#1] Gulp&#39;owanie z Furu - nauka języka</title>
        <description>&lt;h3 id=&quot;przysza-pora-na-kolejn-lekcj-gulpowania-z-furu-dzisiaj-bdzie-ju-stricte-praktycznie-pojawi-si-duo-kodu-oraz-sporo-tumacze-co-si-dzieje-w-danej-sekcji-z-racji-i-wiem-e-nie-kady-ma-pojcie-jak-si-tworzy-strony-www-postaram-si-to-dzisiaj-wszystko-dokadnie-wyjani-by-zachci-kadego-do-podjcia-si-stworzenia-swojej-czci-siebie-w-internecie&quot;&gt;Przyszła pora na kolejną lekcję Gulp’owania z Furu! Dzisiaj będzie już stricte praktycznie, pojawi się dużo kodu oraz sporo tłumaczeń co się dzieje w danej sekcji, z racji iż wiem że nie każdy ma pojęcie jak się tworzy strony WWW, postaram się to dzisiaj wszystko dokładnie wyjaśnić by zachęcić każdego do podjęcia się stworzenia swojej części siebie w internecie!&lt;/h3&gt;

&lt;!--more--&gt;

&lt;p&gt;Jeśli zrobiliśmy wszystko tak jak w poprzedniej lekcji &lt;a href=&quot;/gulp-0/&quot;&gt;Tutaj&lt;/a&gt;, to z powodzeniem możemy przystąpić do dalszej pracy, w której skupimy się na wprowadzeniu do Gulp’a języka kodowania Jade oraz języka ostylowania Sass (o których było wcześniej &lt;a href=&quot;/jezyk-developera/&quot;&gt;Tutaj&lt;/a&gt;). Dobrze, więc zacznijmy od dodania kilku plików do naszego folderu z Gulp’em:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://blogwpelni.files.wordpress.com/2016/05/screen-gulp-7.png&quot; alt=&quot;Gulp&#39;owanie #1-1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Tworzymy w folderze jade, plik z rozszerzeniem .jade, a w folderze sass plik z rozszerzeniem, tutaj jak komu wygodniej ja wybrałem .scss, lecz może być .sass, różnice zostały przedstawione w wyżej podlinkowanym wpisie. Dobrze, wypadałoby teraz nauczyć Gulp’a rozumienia kodu Jade oraz Sass, w tym celu otwieramy konsolę w naszym folderze (&lt;code&gt;SHIFT&lt;/code&gt; + &lt;code&gt;Prawy przycisk myszy&lt;/code&gt; - &lt;code&gt;Otwórz okno polecenia tutaj&lt;/code&gt;) i wpisujemy:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm install gulp-jade --save-dev&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Parametry znajdujące się przy poleceniu omawiałem w [#0] lekcji z Gulp’em, gdy wszystko wykonaliśmy poprawnie, przystępujemy do wprowadzenia drugiego języka, wpisujemy:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm install gulp-sass --save-dev&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;A teraz, jak sprawdzić czy nasze biblioteki zainstalowały się na pewno poprawnie? Wchodzimy w nasz tajemniczy plik &lt;code&gt;package.json&lt;/code&gt; i naszym oczom powinno się ukazać takie coś:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://blogwpelni.files.wordpress.com/2016/05/screen-gulp-8.png&quot; alt=&quot;Gulp&#39;owanie #1-2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Jak widać, nasz początkowo pusty plik, który zawierał wyłącznie nawiasy klamrowe, zawiera teraz nazwy poszczególnych bibliotek jakie instalowaliśmy przy pomocy polecenia npm install wraz z ich wersjami, no dobrze, tylko po co? Mniej więcej po to, aby wiedzieć że pracujemy na pewno na najnowszej wersji danej biblioteki i dla upewnienia, czy faktycznie została prawidłowo dodana do &lt;code&gt;node_modules&lt;/code&gt;, jakim cudem pakiety które instalowaliśmy zagnieździły się w tym pliku? Tutaj swoją rolę odgrywa parametr –save-dev, czy zapis dla programisty, tłumacząc łopatologicznie. Właśnie do tego służy niepozorny plik &lt;code&gt;package.json&lt;/code&gt;. Jeśli wszystko zrobiliście poprawnie, powinno to wyglądać tak jak u mnie, teraz zajmiemy się nauką Gulp’a, aby zrozumiał co my do niego wklepujemy. Otwieramy nasz plik ‘gulpfile.js’ (którego znaczenie tłumaczyłem również w [#0] lekcji) i robimy takie czary mary:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://blogwpelni.files.wordpress.com/2016/05/screen-gulp-9.png&quot; alt=&quot;Gulp&#39;owanie #1-3&quot; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var jade = require(&#39;gulp-jade&#39;);

gulp.task(&#39;jade&#39;, function() {

});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Do poprzedniego kodu dodajemy nową zmienną, importującą bibliotekę Jade oraz tworzymy nowe polecenie dla Gulp’a o nazwie &lt;code&gt;jade&lt;/code&gt;, dodatkowo dodałem komentarze dla lepszego rozeznania w kodzie (komentarze czyli tekst który nie jest wyświetlany na stronie ani nie jest rozpoznawany przez program jako kod do wykonania, można nim oddzielać dane sekcje kodu i opisywać co robią). Teraz sprawimy, żeby nasze polecenie &lt;code&gt;jade&lt;/code&gt;, potrafiło odnaleźć, rozpoznać i skompilować język &lt;code&gt;jade&lt;/code&gt; na zwykły &lt;code&gt;html&lt;/code&gt; (kompilowanie czyli proces przetwarzania kodu pisanego w danym języku na kod zrozumiały dla komputera, w tym przypadku przeglądarki), więc do dzieła:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://blogwpelni.files.wordpress.com/2016/05/screen-gulp-101.png&quot; alt=&quot;Gulp&#39;owanie #1-4&quot; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;gulp.task(&#39;jade&#39;, function() {
    
return gulp.src(&#39;./jade/**/*.jade&#39;)
        
  .pipe(jade({
    pretty: true
  }))
        
  .pipe(gulp.dest(&#39;./&#39;))
});

gulp.task(&#39;default&#39;, [&#39;connect&#39;, &#39;jade&#39;]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A teraz cóż ja tutaj uczynił? Pierw rozszerzyłem polecenie &lt;code&gt;jade&lt;/code&gt;, dodając funkcję która zawiera polecenie gulp.src, którego zadaniem jest wyszukanie plików w języku &lt;code&gt;jade&lt;/code&gt;, precyzyjniej, &lt;code&gt;gulp.src&lt;/code&gt; służy do wyszukiwania miejsca źródłowego skąd pochodzi plik który ma zostać skompilowany, tak jak u mnie gulp ma rozglądać się za plikami &lt;code&gt;jade&lt;/code&gt; znajdującymi się w folderze jade, a co oznaczają te wszystkie gwiazdki? Gwiazdki podwójne, mówią Gulp’owi że powinien szukać plików z rozszerzeniem jade w każdym podfolderze zawartym w folderze &lt;code&gt;jade&lt;/code&gt;, ponieważ w którymkolwiek z podfolderów może pojawiać się dowolnie nazwany (tutaj pojedyncza gwiazdka plik) plik w języku jade, następnie Gulp, ‘wpycha’ znalezione pliki do rury (&lt;code&gt;.pipe&lt;/code&gt;, gulp posługuje się rurami), gdzie wewnętrzne polecenie biblioteki jade, zawiera opcję &lt;code&gt;pretty: true&lt;/code&gt;, dzięki czemu nie muszę martwić się o to czy podczas pisania kodu nie wstawiłem za dużo spacji, tabulatorów czy enterów ponieważ opcja pretty uporządkuje mój kod automatycznie, zaoszczędzając tym samym cenny czas. Następnie, gdy Gulp zakończy wpychanie do rury ma za zadanie czekać, aż zawartość rury wyleci i jego zadaniem jest otrzymany produkt wrzucić do katalogu, w którym powinien znaleźć się plik docelowy ( .pipe(gulp.dest(‘./’)), gdzie (‘./’) oznacza katalog główny czyli nasz folder). Lecz, aby finalnie Gulp zrozumiał, że nauczył się właśnie Jade’a, musimy jeszcze nakazać mu domyślnie ładowanie polecenia &lt;code&gt;jade&lt;/code&gt;, co robimy dopisując w gulp.task(‘default’), nazwę &lt;code&gt;jade&lt;/code&gt;. W ten oto sposób powinniśmy otrzymać wpisując polecenie gulp:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://blogwpelni.files.wordpress.com/2016/05/screen-gulp-11.png&quot; alt=&quot;Gulp&#39;owanie #1-5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Co świadczy o tym, że Gulp zaczął rozumieć Jade! Teraz przyszła pora na nieodłącznego kompana Jade, czyli Sass, ponownie wchodzimy w nasz plik ‘gulpfile.js’:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://blogwpelni.files.wordpress.com/2016/05/screen-gulp-121.png&quot; alt=&quot;Gulp&#39;owanie #1-6&quot; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var sass = require(&#39;gulp-sass&#39;);

gulp.task(&#39;sass&#39;, function() {

  return gulp.src(&#39;./sass/**/*.scss&#39;)
    .pipe(sass().on(&#39;error&#39;, sass.logError))
    .pipe(gulp.dest(&#39;./css&#39;));
  });

gulp.task(&#39;sass:watch&#39;, function() {
  gulp.watch(&#39;./sass/**/*.scss&#39;, [&#39;sass&#39;]);
});

gulp.task(&#39;default&#39;, [&#39;connect&#39;, &#39;jade&#39;, &#39;sass&#39;]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Analogicznie jak poprzednio dodajemy nową zmienną z biblioteką Sass, następnie wydajemy polecenie Gulp’owi o nazwie &lt;code&gt;sass&lt;/code&gt; (nazwa może być dowolna, nie musi tutaj być sass, może być np. style, wtedy w &lt;code&gt;default&lt;/code&gt; zmieniamy &lt;code&gt;sass&lt;/code&gt; na &lt;code&gt;style&lt;/code&gt;), w której funkcja zwraca (return, polecenie służące do zwracania danych, wartości w językach programowania) polecenie &lt;code&gt;gulp.src&lt;/code&gt;, które szuka plików Sass, następnie Gulp wpycha do rury znalezione pliki, po czym przy wykorzystaniu polecenia z biblioteki Sass, jeżeli nasz kod będzie zawierał błędy, np. gdzieś zjedliśmy klamrę albo pomyliliśmy literę, otrzymamy w naszej konsoli błąd z dokładnym położeniem (sass.logError, zwraca błędy spotkane podczas kompilacji), następnie z rury nasze pliki trafiają do folderu o nazwie &lt;code&gt;css&lt;/code&gt;. Następne polecenie, które wydaliśmy Gulp’owi ma za zadanie obserwowanie plików sass na bieżąco, dzięki czemu jest w stanie po każdym zapisie pliku rozpoznać czy nie występują błędy w naszym kodzie(&lt;code&gt;sass:watch&lt;/code&gt;), co wywołujemy wpisując polecenie &lt;code&gt;gulp.watch&lt;/code&gt;, miejsce obserwowania plików oraz nazwa naszego polecenia zawierającego rozpoznawanie Sass. Na sam koniec trzeba jeszcze pokazać Gulp’owi, że już potrafi obsługiwać Sass, więc analogicznie dodajemy po przecinku &lt;code&gt;sass&lt;/code&gt;. Jeśli wszystko zrobiliśmy jak należy, otrzymamy po wpisaniu w konsolę &lt;code&gt;gulp&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://blogwpelni.files.wordpress.com/2016/05/screen-gulp-13.png&quot; alt=&quot;Gulp&#39;owanie #1-6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;W ten oto sposób nauczyliśmy naszego Gulp’a posługiwania się dwoma językami nowoczesnego webdeveloper’a! Pamiętajcie, że jeżeli wasz edytor domyślnie nie posiada obsługi danego języka musicie wgrać odpowiednie rozszerzenie z obsługą tego języka, tak aby składnia była przez niego rozpoznawana, w moim przypadku Visual Studio Code nie posiadał obsługi Jade, więc musiałem zainstalować składnię Jade do programu, w zależności od edytora robi się to inaczej, aczkolwiek podobnie, także nie będę tutaj pokazywał sposobu jak to zrobić, po prostu wpiszcie w Google nazwę waszego edytora i język jakiego potrzebujecie np. Visual Studio Code jade&lt;/p&gt;

&lt;p&gt;Liczyłem, że w tej lekcji uda się stworzyć pierwszą stronę WWW, jednakże wytłumaczenie poleceń jakimi posługuje się Gulp w celu implementacji języka i przetworzenie go, zajęło całkiem sporo miejsca, także w następnej lekcji tworzymy własną stronę w Jade oraz ostylowujemy ją Sass’em i całość zostanie wzbogacona o tajemniczą opcję: ‘Livereload’, która umożliwia przetwarzanie kodu na żywo, zapisując plik w edytorze nie trzeba odświeżać przeglądarki, aby ujrzeć zmiany! Więc do kolejnej lekcji, a tymczasem jak zawsze jeśli podobał Ci się artykuł, spróbowałeś nauczyć Gulp’a nowych języków czy po prostu miło Ci się czytało, zostaw ‘Lubię to!’ co zmotywuje mnie jeszcze bardziej do dalszego tworzenia artykułów, komentarze mile widziane! Trzymajcie się w Pełni! :&amp;gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Artykuł oraz grafiki w nim zawarte są moją własnościa - &lt;strong&gt;Furu.ART&lt;/strong&gt;, zakaz kopiowania treści na inne blogi, fanpage czy strony - Bo nogi z &lt;em&gt;**&lt;/em&gt; powyrywam!&lt;/p&gt;
</description>
        <pubDate>Tue, 24 May 2016 16:00:00 +0200</pubDate>
        <link>/gulp-1/</link>
        <guid isPermaLink="true">/gulp-1/</guid>
        
        <category>code</category>
        
        <category>console</category>
        
        <category>developer</category>
        
        <category>Dla Webdevelopera</category>
        
        <category>front-end</category>
        
        <category>gulp</category>
        
        <category>jade</category>
        
        <category>javascript</category>
        
        <category>konsola</category>
        
        <category>node</category>
        
        <category>npm</category>
        
        <category>pipes</category>
        
        <category>sass</category>
        
        <category>web</category>
        
        <category>webdeveloper</category>
        
        
        <category>Dla webdeveloper&#39;a</category>
        
      </item>
    
      <item>
        <title>[#1] Material design jako krok w przód w projektowaniu - wprowadzenie</title>
        <description>&lt;h3 id=&quot;kady-kto-posiada-smartfon-z-systemem-android-w-wersji-44-lub-wyszej-jest-w-stanie-zauway-e-styl-w-jakim-tworzone-s-aplikacje-jest-mocno-schematyczny-i-mona-by-rzecz-powtarzalny-owszem-tylko-co-z-tego-ot-to-e-dziki-tej-standaryzacji-googlewypracowao-swj-wasny-odrbny-design-ktry-mimo-e-pierwotnie-by-skierowany-wycznie-na-smartfony-z-powodzeniem-moe-suy-na-stronach-www&quot;&gt;Każdy kto posiada smartfon z systemem Android w wersji 4.4 lub wyższej jest w stanie zauważyć, że styl w jakim tworzone są aplikacje jest mocno schematyczny i można by rzecz powtarzalny. Owszem, tylko co z tego? Otóż to, że dzięki tej standaryzacji Google wypracowało swój własny, odrębny design, który mimo że pierwotnie był skierowany wyłącznie na smartfony z powodzeniem może służyć na stronach WWW!&lt;/h3&gt;

&lt;!--more--&gt;

&lt;p&gt;Dobrze, ale czym właściwie jest ten unikatowy design słynny dla Google’a? Material design, bo taką nazwę nosi czerpie swój styl z prostoty, użyteczności i stanowi niejako sposób komunikacji użytkownika z interfejsem. Cytując zamysł twórców zawarty na oficjalnej stronie Google’a:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Create a visual language that synthesizes classic principles of good design with the innovation and possibility of technology and science.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;~Material design–Introduction&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Za cel postawili sobie stworzenie wizualnego języka, który łączy klasyczne reguły dobrego design’u z innowacją oraz możliwościami technologii i nauki. Co jak najbardziej im się udało, ponieważ Material design jest przejrzysty, zachowując nacisk na czytelności dodatkowo jest intuicyjny, wprowadza nowe pomysły (o których za chwilę), a także pozwala nauczyć się jak tworzyć w rytmie Materiału.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://blogwpelni.files.wordpress.com/2016/05/material3.png&quot; alt=&quot;MaterialDesign #1-1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Teraz postaram się wytłumaczyć co autorzy mieli na myśli piszą te trzy jakże wyraziste sentencje. ‘Material is the metaphor’ - czyli Materiał jest metaforą, to jak to w końcu jest? Ten Material to tak na prawdę nie Material? Już tłumaczę, Materiał w przeciwieństwie do jakiegokolwiek płaskiego obiektu posiada warstwy (tak, podobnie do ogrów i cebuli…), ale zaraz, zaraz warstwy? Przecież strona internetowa czy interfejs w aplikacji na telefonie jest płaski! Właśnie w tym momencie pojawia się metafora, Design ten wyróżnia plany, sprawia że wizualna strona aplikacji nie jest jako jedna zwięzła część, Material wykorzystując cienie, położenie względem osi Z (Trójwymiar, posiada trzy wymiary jak sama nazwa wskazuje, tak jak układ kartezjański posiada oś X i Y, pozioma, pionowa, tak siatka trójwymiarowa posiada trzy osi X, Y oraz Z, czyli pozioma, pionowa i głębia) oraz kolory, aby uprzestrzennić płaską strukturę aplikacji, ukazując przy tym hierarchię elementów (o czym za moment).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/thumb/8/83/Coord_planes_color.svg/2000px-Coord_planes_color.svg.png&quot; alt=&quot;MaterialDesign #1-2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Kolejnym postulatem jest: ‘Bold, graphic, intentional’ - Pogrubiony, obrazowy, zamierzony, brzmi całkiem po chińsku (prawie jak język webdeveloper’a :&amp;gt;), spieszę z wytłumaczeniem. Cała sentencja odnosi się bezpośrednio do użyteczności i intuicyjności Materiału, każdy element na stronie musi być wyraźny, kojarzący się od razu z funkcją jaką pełni w interfejsie w aplikacji oraz służyć określonym celom, wszystko powinno być przemyślane. Teraz posługując się bezpośrednio przykładem, gdy wchodzimy w aplikację gdzie musimy się zarejestrować lub zalogować, aby przeglądać treść, normalnie szukalibyśmy jakiegoś przycisku, tekstu, odnośnika, który mówiłby cokolwiek o Rejestracji, przykładowo: ‘Zarejestruj się, aby przeglądać publikacje’, Material design kompletnie wyrzuca warstwę tekstową zastępując ją odgórnie przypisanym symbolem ludzika &lt;i class=&quot;ion-android-contact&quot;&gt;&lt;/i&gt;, gdzie będziemy mogli się zalogować po kliknięciu, ikonka ta musi znajdować się na samej górze strony, w celu łatwej dostępności, wykonywać jakiś ruch, aby ukazać do czego służy (o czym za chwilę). W ten sposób, Google wprowadziło standard dla swojego interfejsu, przypisując odpowiednim ikonom określone funkcje, których całą listę znajdziecie pod tym adresem:  &lt;a href=&quot;http://design.google.com/icons/&quot;&gt;Materiałowe ikonki&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://blogwpelni.files.wordpress.com/2016/05/material4.png&quot; alt=&quot;MaterialDesign #1-3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Przyszedł czas na ostatnią regułę zapisaną w świętej księdze Material Design’u (nie, no nie ma takiej, ale uznajmy że oficjalna strona pełni taką funkcję), czyli ‘Motion provides meaning’ - Ruch przewiduje znaczenie, aha… Dobrze, tutaj poruszamy wspomniany przeze mnie temat ‘Jakiegoś ruchu’, którego zadaniem jest nieść znaczenie, czyli dawać korzystającemu informację o tym, że element różni się od pozostałych pełniąc jakąś funkcję. Przykładowo przycisk na stronie będzie różnił się od pozostałej treści głównie tym, że wygląda jak przycisk i można go wcisnąć, Material design zadba również o to że wypełnienie przycisku po wciśnięciu zostanie ukazane płynną animacją napełniania kolorem, błyskiem lub innym efektem zwracającym uwagę użytkownika. Dzięki ruchowi jesteśmy sygnalizowani o możliwościach interakcji z interfejsem aplikacji lub strony, tak jak np. pole wyboru z różnymi opcjami, gdy klikniemy na jedną z możliwości zostaniemy poinformowani o zaznaczeniu efektem pląśnięcia (nie wiedziałem jak lepiej nazwać ten efekt). Niby jest to trochę zbędne jednakże ukazuje ideę Ruchu w design’ie, ponieważ standardowe podejście do designu eliminuje wszelkie efekty rozpraszające użytkownika na treści, a tutaj pozwala zrozumieć symbolikę popartą poruszaniem. Aczkolwiek całość musi być wciąż minimalistyczna, czyli przetłok animacji nie jest tutaj mile widziany!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://blogwpelni.files.wordpress.com/2016/05/material5.png&quot; alt=&quot;MaterialDesign #1-4&quot; /&gt;
Przykład ruchu, dobrego i złego dostępny tutaj: &lt;a href=&quot;https://www.google.com/design/spec/motion/material-motion.html#material-motion-what-makes-a-good-transition&quot;&gt;Motion&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Myślę, że jak na pierwszą ogólnikową lekcję na temat Material Design’u wystarczy, przedstawiłem podstawowe zasady jakimi kieruje się ten styl, w następnych będę już bezpośrednio rozkładał na czynniki pierwsze poszczególne elementy i tłumaczył dlaczego są istotne w Material Design’ie! Oczywiście, jeśli zachęciłem Cię do zainteresowania się temat Material Design’u, miło czytało Ci się ten artykuł lub po prostu doceniasz mój sposób prowadzenia lekcji, zostaw ‘Lubię to!’, aby zmotywować mnie jeszcze bardziej do kolejnych lekcji oraz w celu szerszej publikacji w sieci. A tymczasem do kolejnej lekcji w Pełni!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://blogwpelni.files.wordpress.com/2016/05/material.png&quot; alt=&quot;MaterialDesign #1-5&quot; /&gt; 
Przykładowy wygląd aplikacji w stylu Material Design&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Część grafik oraz treść artykułu są moją własnościa - &lt;strong&gt;Furu.Art&lt;/strong&gt;, zakaz kopiowania na inne blogi, fanpage czy strony, bo nogi z &lt;em&gt;**&lt;/em&gt; powyrywam!&lt;/p&gt;
</description>
        <pubDate>Mon, 23 May 2016 16:00:00 +0200</pubDate>
        <link>/material-1/</link>
        <guid isPermaLink="true">/material-1/</guid>
        
        <category>android</category>
        
        <category>apps</category>
        
        <category>design</category>
        
        <category>Dla Webdesignera</category>
        
        <category>google</category>
        
        <category>material</category>
        
        <category>minimalistic</category>
        
        <category>minimalizm</category>
        
        <category>modern</category>
        
        <category>projektowanie</category>
        
        <category>webdesign</category>
        
        
        <category>Dla webdesigner&#39;a</category>
        
      </item>
    
      <item>
        <title>Po jakiemu gada współczesny webdeveloper?</title>
        <description>&lt;h3 id=&quot;jzyki-programowania-to-sprawa-powszechna-mwi-si-o-nich-cigle-i-nie-jest-to-adn-tajemnic-czy-kto-jest-znawc-c-c-pythona-czy-javy-ale-jakim-dialektem-porozumiewa-si-webdeveloper-w-dzisiejszych-czasach-mwi-tutaj-oczywicie-o-webdeveloperze-ktry-zajmuje-si-wierzchni-czci-stron-www-front-end-developer-na-to-pytanie-postaram-si-odpowiedzie-niej&quot;&gt;Języki programowania to sprawa powszechna, mówi się o nich ciągle i nie jest to żadną tajemnicą, czy ktoś jest znawcą C++, C#, Python’a czy Javy, ale jakim dialektem porozumiewa się Webdeveloper w dzisiejszych czasach? Mówię tutaj oczywiście o Webdeveloperze, który zajmuje się wierzchnią częścią stron WWW (Front-end developer), na to pytanie postaram się odpowiedzieć niżej.&lt;/h3&gt;

&lt;!--more--&gt;

&lt;p&gt;Nowoczesny front-end’owiec posługuje się wszystkimi językami skracającymi czas pracy przy kodzie do minimum, jak pisałem wcześniej we wpisie o Gulp’ie developerzy są leniwi, zazwyczaj staram się osiągać bardzo dużo robiąc przy tym całkiem niewiele! Więc Webdeveloper korzysta ze wszystkich dialektów, które posiadają swój preprocesor (możliwe jest kompilowanie i przekazywanie do strony gotowych plików domyślnych) dzięki nim jesteśmy w stanie rozszerzać fundamentalne języki kodowania o zaawansowane funkcje znane z języków programowania! No dobrze, ale tak po ogólnikach to my możemy biadolić i długie godziny! Czas na konkrety!&lt;/p&gt;

&lt;p&gt;Leniwy Developer (czytaj Furu), zamienia fundamentalny i standardowy język kodowania HTML(Hypertext Markup Language) na JADE, który chyba nie ma jakiegoś specjalnego rozwinięcia skrótu. A czym się JADE charakteryzuje i wybija na tle poczciwego HTML’a?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://scontent.fwaw3-1.fna.fbcdn.net/t31.0-8/13247863_1096271317099262_3925155763292011591_o.jpg&quot; alt=&quot;DeveloperLanguage #0-1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Jak widać JADE omija kompletnie znaczniki zamykające znane ze standardu HTML, bo w sumie dlaczego nie? W ten sposób nie muszę martwić się o to czy nie zapomniałem gdzieś zakończyć daną sekcję, JADE automatycznie rozpoznaje gdzie zaczyna się nowy element, a gdzie poprzedni kończy co znacznie przyspiesza tworzenie, stanowiąc niejako główny priorytet dla nowoczesnego webdeveloper’a. Bo jednak jest różnica, między tym:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://scontent.fwaw3-1.fna.fbcdn.net/v/t1.0-9/13245344_1096271567099237_8855838556292295556_n.jpg?oh=48b92f1cae34d9856b73708495b26d69&amp;amp;oe=57D9B8F5&quot; alt=&quot;DeveloperLanguage #0-2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A tym:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://scontent.fwaw3-1.fna.fbcdn.net/v/t1.0-9/13256036_1096273213765739_3709020799767216504_n.jpg?oh=a1ff344512e0feb94e8e5672077faa46&amp;amp;oe=57E0D1EE&quot; alt=&quot;DeveloperLangauge #0-3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Niby liczbowo nie wygląda jakoś powalająco, acz podczas samego procesu kodowania czas skraca się bardzo znacząco. Dobrze, ale czy to wszystko co daje JADE? Omijanie znaczników i uproszczenie zapisu? Otóż nie, posiada on również możliwości znane z JavaScript’u, które można implementować bezpośrednio do kodu strony, przykładowe wykorzystanie:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://scontent.fwaw3-1.fna.fbcdn.net/t31.0-8/13268026_1096273587099035_373288946758729336_o.jpg&quot; alt=&quot;DeveloperLanguage #0-4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Czyli jesteśmy w stanie dodawać pętle warunkowe (if, ifelse, else), importować dowolną sekcję kodu utworzoną osobno, np. Nagłówek strony, Logo w formacie wektorowym, tworzyć zmienne do przechowywania danych czy importować stopkę, która czai się np. pięćdziesiąt folderów w głębinach folderu nadrzędnego, bo dlaczego nie? Mniej więcej to umożliwia Jade, lecz to tylko sam język elementów wyświetlanych na stronie. Teraz przyszła kolej na ulepszonego CSS’a czyli SASS!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://scontent.fwaw3-1.fna.fbcdn.net/v/t1.0-9/13254550_1096280423765018_8753534399608225232_n.png?oh=fb1917690dd53af2059a858257f65ef5&amp;amp;oe=57CBE2C8&quot; alt=&quot;DeveloperLanguage #0-5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Wszystko za co ja jako developer ubóstwiam Sass’a to przede wszystkim tworzenie zmiennych, którymi mogę przechowywać w wygodny sposób np. wartości kolorów i wywoływać je za pomocą &lt;code&gt;$nazwaZmiennej&lt;/code&gt;, tak zwane &lt;code&gt;@Mixins&lt;/code&gt;, czyli predefiniowane funkcje, które możemy na bieżąco dowolnie zmieniać, zawierają one zmienne, czyli możemy zapisać transition dla wszystkich przeglądarek jako:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-sass&quot;&gt;@mixin transition($element, $time, $effect) {
-webkit-transition: $element, $time, $effect;
-moz-transition: $element, $time, $effect;
-o-transition: $element, $time, $effect;
-ms-transition: $element, $time, $effect;
transition: $element, $time, $effect;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Zaś gdy będziemy chcieli wykorzystać naszą funkcję w kodzie, wpiszemy: &lt;code&gt;@include transition(background-color, .4s, ease-in-out);&lt;/code&gt; i w ten sposób wywołamy transition dla wszystkich przeglądarek co niesamowicie upraszcza tworzenie kodu, oczywiście jest to jeden z bardziej błahych przykładów, ponieważ możemy dzięki &lt;code&gt;@mixin&lt;/code&gt; stworzyć bardzo złożone sekcje kodu, np. system &lt;code&gt;grid&lt;/code&gt; (o którym będzie kiedy indziej). W głównej mierze to najważniejsze elementy, za które uważam że ciężko jest mi się obejść bez korzystania z Sass’a - jest po prostu wygodny!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://scontent.fwaw3-1.fna.fbcdn.net/v/t1.0-9/13260266_1096281483764912_2155949737886732988_n.jpg?oh=ea35cb4b84996122dc3dd33433900df3&amp;amp;oe=579F23DF&quot; alt=&quot;DeveloperLangauge #0-6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Mniej więcej czysto teoretycznie byłoby na tyle, ponieważ nie chcę tutaj wprowadzać bezpośrednio całego procesu ustawiania folderu pod kompilowanie Jade i Sass, tym zajmę się w innej lekcji połączonej z nauką Gulp’a, tak aby nie musieć trzymać otwartych kilku konsol do każdego języka preprocesorowego. Rzecz jasna do języka Developera leniucha należy jQuery, które jest po prostu nieodzowne podczas pracy nad Front-end’owymi elementami takimi jak slider’y czy galerie. A póki co to byłoby na tyle, jeśli spodobał Ci się ten artykuł, zachęciłem Cię do zgłębienia tego tematu szerzej, czy po prostu podoba Ci się to w jaki sposób piszę, zostaw ‘Lubię to!’ to bardzo motywuje do dalszych działań, dodatkowo zachęcam do komentowania lub udostępniania! Trzymajcie się w Pełni, do następnej lekcji :)&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Część grafik oraz treść artykułu są moją własnością - &lt;strong&gt;Furu.ART&lt;/strong&gt;, zakaz kopiowania treści lub grafik na własne fan-page, strony czy blogi - Bo nogi z &lt;em&gt;**&lt;/em&gt; powyrywam!&lt;/p&gt;
</description>
        <pubDate>Sun, 22 May 2016 14:00:00 +0200</pubDate>
        <link>/jezyk-developera/</link>
        <guid isPermaLink="true">/jezyk-developera/</guid>
        
        <category>code</category>
        
        <category>css</category>
        
        <category>Dla Webdevelopera</category>
        
        <category>front-end</category>
        
        <category>html</category>
        
        <category>jade</category>
        
        <category>leniwy</category>
        
        <category>performance</category>
        
        <category>preprocesor</category>
        
        <category>sass</category>
        
        <category>webdeveloper</category>
        
        <category>webmaster</category>
        
        
        <category>Dla webdeveloper&#39;a</category>
        
      </item>
    
      <item>
        <title>Projektowanie na kartce? Z czym to się je? - Podstawy</title>
        <description>&lt;h3 id=&quot;wikszo-stron-dobrze-przemylanych-pod-wzgldem-wizualnym-ktre-widzimy-w-internecie-zostay-pierwotnie-skonstruowane-na-kartce-white-boardzie-tablicy-kredowej-lub-nawet-za-pomoc-tych-karteczek-samoprzylepnych-no-dobrze-fajnie-tylko-co-z-tego-a-no-dokadnie-tyle-e-kady-dobry-projekt-zaczyna-si-z-dala-od-komputera-a-sam-proces-designu-wyglda-mniej-wicej-jak-zabawa-klockami-lego-o-czym-za-chwil-si-przekonacie&quot;&gt;Większość stron dobrze przemyślanych pod względem wizualnym, które widzimy w internecie zostały pierwotnie skonstruowane na kartce, white-board’zie, tablicy kredowej lub nawet za pomocą żółtych karteczek samoprzylepnych. No dobrze, fajnie, tylko co z tego? A no dokładnie tyle, że każdy dobry projekt zaczyna się z dala od komputera! A sam proces Design’u wygląda mniej więcej jak zabawa klockami Lego, o czym za chwilę się przekonacie.&lt;/h3&gt;

&lt;!--more--&gt;

&lt;p&gt;Moje porównanie do zabawy klockami nie jest bez powodu, ponieważ aby tworzyć przemyślane strony WWW musimy układać odpowiednie sekcje (tak jak w Lego klocki) na kartce. Dzięki czemu wykreujemy coś co slang Designerów nazywa Wireframe’em, który jest niczym innym jak tylko szkieletem naszej strony, taka trochę mąka w chlebie czy mleko w serze (jeśli mówimy o prawdziwym serze, a nie produktach seropodobnych). A teraz jak wygląda przykładowy Wireframe?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://scontent.fwaw3-1.fna.fbcdn.net/t31.0-8/q81/p720x720/13247701_1095687953824265_3243955340251241928_o.jpg&quot; alt=&quot;Projektowanie na kartce #0-1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Jak widać jest to najzwyczajniej w świecie szkic, w którym pomijamy jakiekolwiek detale. Istotą jest wiedzieć co chce się otrzymać i tak jak u mnie, można sobie rozpisać co dana sekcja będzie robić, ale to już bardziej ze względów developerskich. Dobrze, to co musimy zrobić aby zostać Szkieleciarzem? (Wireframe’owiec brzmi jakoś średnio)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Kartka, najlepiej kropkowana lecz jeśli nie mamy kropkowanej może być jakakolwiek w kratkę, kropkowana jest dla czystej wygody tworzenia, jest to bardziej precyzyjne i odzwierciedla mniej więcej piksele, a jeśli nie kartka to np. white-board.&lt;/li&gt;
  &lt;li&gt;Ołówek/Długopis/Mazak/Pióro/Kreda lub jakiekolwiek inne narzędzie do kreślenia, jak ktoś ma duże aspiracje może nawet cyrklem to robić, Gumka do ścierania (nie do mazania, ważne!)&lt;/li&gt;
  &lt;li&gt;Pomysł, chęci no i rzecz jasna minimalną umiejętność rysowania linii, kółek lub prostokątów.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Skoro już wiadomo co będzie nam potrzebne do naszego pierwszego Szkieletu strony WWW, przystępujemy do pracy! Ale zaraz, zaraz, żeby budować coś z klocków, wymagane są jeszcze ów klocki. Zacznijmy od podstawy klockowej rodziny, czyli tak zwanego Kontenera (Container), będzie on głównym blokiem gromadzącym dane sekcje w sobie, oznaczamy go w ten sposób:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://scontent.fwaw3-1.fna.fbcdn.net/v/t1.0-9/13239415_1095688203824240_8283989596796657239_n.png?oh=7e7eeeba7397969baaecf05b6f6a2e58&amp;amp;oe=57D5DA38&quot; alt=&quot;Projektowanie na kartce #0-2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Oprócz kontenera zawarłem element o szerokości całego dokumentu, czyli np. pasek z menu na górze strony lub stopka. Wewnątrz naszego ‘Tatuśka’ będziemy umieszczać Pudełka (Box’y), rzadziej Tabelki lecz nie miałem gdzie indziej ich wcisnąć:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://scontent.fwaw3-1.fna.fbcdn.net/v/t1.0-9/13254582_1095688643824196_2132074975117357677_n.png?oh=122f0aa3a7d5f66ae627b491d99ba5ec&amp;amp;oe=57DE4A97&quot; alt=&quot;Projektowanie na kartce #0-3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Do naszego Pudełka będziemy pakować chociażby różne obrazki, grafiki, infografiki, które w ‘języku’ designer’a prezentują się w następujący sposób (im bardziej koślawo tym lepiej!), rzecz jasna jeśli obrazek jest na całą szerokość strony, rysujemy tak jak dowolny element na całość strony z symbolem obrazka:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://scontent.fwaw3-1.fna.fbcdn.net/t31.0-8/13217100_1095688890490838_7419218477597869690_o.png&quot; alt=&quot;Projektowanie na kartce #0-4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Oprócz grafik przydałby się jakiś tekst, nagłówki, wpisy, odnośniki, listy i inne tego typu, występują pod postacią szlaczków i gryzmołów, nagłówek w celu odróżnienia zaczyna się wysokim maźnięciem do góry i dalej szlaczki, nawigacją mogą być np. listy wysuwane, wielopoziomowe (Dropdown-menu):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://scontent.fwaw3-1.fna.fbcdn.net/t31.0-8/13246313_1095689017157492_533384767730753189_o.png&quot; alt=&quot;Projektowanie na kartce #0-5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Mamy obrazki, mamy teksty, no to może na dokładkę jakieś przyciski akcji? Proszę bardzo! Przyciski są zaokrąglonymi prostokątami z ‘btn’ w środku, zamiast ‘btn’ można wpisać nazwę akcji jaką ma wykonywać np. ‘send’. A te strzałeczki, służą do wskazania treści przewijanej gestami, np. Guziki galerii interaktywnej, pokazu slajdów (Slider’y):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://scontent.fwaw3-1.fna.fbcdn.net/v/t1.0-9/13254146_1095689343824126_3919057959557241615_n.png?oh=af296e7141f7c37333a6a4cd664c8ace&amp;amp;oe=579AC17B&quot; alt=&quot;Projektowanie na kartce #0-6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;W sumie można by powiedzieć, że mamy już wszystko, jednakże dorzuciłbym do tej listy wszelakie ikonki utarte w internecie w celu określenia funkcji danego elementu, zegarek - pokazywanie daty publikacji posta, kalendarz - archiwum postów, ludzik - możliwość logowania, myszka - należy przewijać, aby coś się stało, kratka (hash) - tagi w poście, chmurka - komentarze, strzałka góra-dół - element będzie przesuwał się wraz z przesuwaniem strony (fixed):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://scontent.fwaw3-1.fna.fbcdn.net/v/t1.0-9/13254064_1095689477157446_3960216173243312375_n.png?oh=16b35507ae3311c85cd2950314f218ae&amp;amp;oe=57E35F5B&quot; alt=&quot;Projektowanie na kartce #0-7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Skoro poznaliśmy klocki, to jesteśmy w stanie stworzyć już jakiś szkielet! Budujemy dokładnie tak jak w przypadku klocków Lego. Granicą może być tylko i wyłącznie wasza wyobraźnia oraz sposób widzenia. Z ów składników można otrzymać np. coś takiego:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://scontent.fwaw3-1.fna.fbcdn.net/t31.0-8/q85/p720x720/13220564_1095689750490752_8773304643814460874_o.jpg&quot; alt=&quot;Projektowanie na kartce #0-8&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Jak widzicie nic trudnego stworzyć Szkielet strony, a później problemem nie będzie przerzucenie tego do Photoshop’a i stworzenie normalnego Layout’u! Co również będę starał się wam pokazać. Mam nadzieję, że spróbujecie wykonać własny Szkielet strony i ta lekcja wam się przyda, do czego zachęcam! Oczywiście, jeśli wpis wam się podobał, przeczytaliście go, skorzystaliście, zostawcie magiczne ‘Lubię to!’, aby lekcja dotarła do szerszej publiczności, komentarze jak zawsze mile widziane, a tymczasem do zobaczenia w Pełni! :)&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Materiały zawarte w artykule oraz treści są moją własnością - &lt;strong&gt;Furu.ART&lt;/strong&gt;, zakaz kopiowania treści lub grafik na własne fanpage, strony czy blogi - Bo nogi z &lt;em&gt;**&lt;/em&gt; powyrywam!&lt;/p&gt;
</description>
        <pubDate>Sat, 21 May 2016 14:00:00 +0200</pubDate>
        <link>/design-na-kartce-0/</link>
        <guid isPermaLink="true">/design-na-kartce-0/</guid>
        
        <category>design</category>
        
        <category>Dla Webdesignera</category>
        
        <category>notepad</category>
        
        <category>ołówek</category>
        
        <category>pencil</category>
        
        <category>projektowanie</category>
        
        <category>sheet</category>
        
        <category>sketch</category>
        
        <category>szkic</category>
        
        <category>web</category>
        
        <category>wireframe</category>
        
        
        <category>Dla webdesigner&#39;a</category>
        
      </item>
    
      <item>
        <title>[#0] Gulp&#39;owanie z Furu</title>
        <description>&lt;h3 id=&quot;gulp-czyli-jak-pcha-w-rury-aby-leniwy-programista-mia-wygodne-stanowisko-do-pracy-ale-tak-waciwie-to-o-co-chodzi-ju-tumacz-dziki-tylko-jednemu-poleceniu-w-konsoli-otrzymamy-perfekcyjne-rodowisko-do-tworzenia-stron-www-aplikacji-czy-jakiejkolwiek-innej-formy-web-developmentu-brzmi-jak-czarna-magia-nie-taki-diabe-straszny-jak-go-pisz-o-czym-przekonacie-si-poniej&quot;&gt;Gulp, czyli jak pchać w rury aby leniwy programista miał wygodne stanowisko do pracy! Ale tak właściwie to o co chodzi? Już tłumaczę, dzięki tylko jednemu poleceniu w konsoli otrzymamy perfekcyjne środowisko do tworzenia stron WWW, aplikacji czy jakiejkolwiek innej formy Web Development’u! Brzmi jak czarna magia? Nie taki diabeł straszny jak go piszą, o czym przekonacie się poniżej.&lt;/h3&gt;
&lt;!--more--&gt;

&lt;p&gt;Dobrze, więc czym tak właściwie jest Gulp i co robi? Gulp to system budowania plików, tłumacząc łopatologicznie. A tak bardziej na nasze, jest narzędziem które pełni rolę kompilatora w tradycyjnym programowaniu, lecz dla języków web’owych. Gulp, posługuje się poleceniami, za pomocą których przetwarza zaimplementowane biblioteki rozszerzając swoje zdolności wedle naszych potrzeb. Mniej więcej już nakreśliłem czym jest Gulp, także teraz jakie istotne warunki musimy spełnić, aby móc korzystać z dobrodziejstwa jakim jest Gulp?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Komputer, laptop, mini-pc czy jakiekolwiek urządzenie komputero-podobne&lt;/li&gt;
  &lt;li&gt;Zainstalowaną aplikację NodeJS: &lt;a href=&quot;https://nodejs.org/en&quot;&gt;NodeJS&lt;/a&gt; Instalacja przebiega wedle instrukcji podanych podczas pracy instalatora&lt;/li&gt;
  &lt;li&gt;Konsolę, CMD czy inne emulatory konsol&lt;/li&gt;
  &lt;li&gt;Edytor kodu, ja używam Visual Studio Code, może być jakikolwiek, byle nie notatnik&lt;/li&gt;
  &lt;li&gt;Dobre chęci i minimalną znajomość języka JavaScript&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Gdy spełniamy powyższe wymogi, jesteśmy w stanie przejść do sedna, czyli jak Gulp’a rozruszać! Tworzymy nowy folder w dowolnym miejscu, o nazwie jakiej nam się podoba, powinno to wyglądać mniej więcej tak:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://scontent.fwaw3-1.fna.fbcdn.net/v/t1.0-9/13254207_1095100180549709_7017570604691708785_n.png?oh=23ee4ede9b6a1d957c17e6ca541f3618&amp;amp;oe=57CBDDEB&quot; alt=&quot;Gulp&#39;owanie #0-1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Oczywiście wszystko zależy od tego czego będziemy potrzebować, teraz w naszym folderze tworzymy nowy plik o nazwie ‘package.json’, wstawiamy 
&lt;code&gt;
{ }
&lt;/code&gt;
i rozdzielamy klamry enterem, plik .json:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://scontent.fwaw3-1.fna.fbcdn.net/v/t1.0-9/13265998_1095101533882907_8600345414029257017_n.png?oh=08dfa6c4a500e19e3a2473731b33ad29&amp;amp;oe=5799E1E4&quot; alt=&quot;Gulp&#39;owanie #0-2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;po czym zapisujemy plik. Następnie w naszym folderze klikamy &lt;code&gt;SHIFT + Prawy Przycisk Myszy&lt;/code&gt; i wybieramy ‘Otwórz okno polecenia tutaj’, po czym wewnątrz konsoli wpisujemy &lt;code&gt;npm install gulp --save-dev&lt;/code&gt; (–save-dev zapisuje w pliku &lt;code&gt;package.json&lt;/code&gt; informacje o zainstalowanym pakiecie npm, w tym przypadku Gulp’a)Gdy instalacja przebiegnie pomyślnie, wracamy do naszego folderu i tworzymy nowy plik o nazwie &lt;code&gt;gulpfile.js&lt;/code&gt;, gdzie będziemy wydawać polecenia Gulp’owi, a on będzie je wykonywał. Wewnątrz pliku rozpoczynamy podstawową inicjację Gulp’a, właśnie tutaj przyda się minimalna wiedza na temat JS:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://scontent.fwaw3-1.fna.fbcdn.net/v/t1.0-9/13237759_1095101817216212_1693573295641913201_n.png?oh=5c8a4b324fc391c7552c22d41b26a1fb&amp;amp;oe=57D7C3C6&quot; alt=&quot;Gulp&#39;owanie #0-3&quot; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var gulp = require(&#39;gulp&#39;);

gulp.task(&#39;default&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Po czym zapisujemy nasz plik. A teraz co właściwie uczyniliśmy? Utworzyliśmy zmienną, która zaimportowała bibliotekę Gulp oraz wydaliśmy pierwsze polecenie do Gulp’a, którym jest domyślna funkcja, dzięki której inicjujemy Gulp’a oraz wszystkie biblioteki które będziemy wkrótce dodawać. Teraz po jakże trudnej lekcji programowania, wracamy do naszej konsoli i wpisujemy bardzo złożone (uwaga trudne, można się pomylić) polecenie: &lt;code&gt;gulp&lt;/code&gt;, tak zgadza się to całe polecenie. Teraz naszym oczom powinien ukazać się taki obraz jeśli zrobiliśmy wszystko właściwie i nie mamy krzywych linijek w edytorze:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://scontent.fwaw3-1.fna.fbcdn.net/v/t1.0-9/13221467_1095102290549498_6352568800704621852_n.png?oh=86a814ad6abcda84660c809380d83399&amp;amp;oe=57CA563B&quot; alt=&quot;Gulp&#39;owanie #0-4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Jak widać Gulp wykonał polecenie &lt;code&gt;default&lt;/code&gt;, które oczywiście nie posiadało żadnych dodatkowych funkcji, przez co program zakończył natychmiastowo pracę (58 mikrosekund). Tak oto zaimplementowaliśmy do naszego folderu roboczego, Gulp’a który będzie przepychał nam pliki, kompilując je w wybrany przez nas sposób (o czym później). Dobrze, ale mam wrażenie że wyświetlenie komunikatu o prawidłowym wykonaniu polecenia, które nic nie robi, nie jest szczytem możliwości Gulp’a, wobec tego pokażę wam jeszcze w tej lekcji jak postawić przy pomocy wyłącznie Gulp’a serwer http, bez żadnych dodatkowych instalatorów! Cała magia tkwi w prostocie i możliwościach rozszerzenia Gulp’a, dzięki społeczności &lt;code&gt;npm&lt;/code&gt;. Pozostając w naszej konsoli wpisujemy polecenie &lt;code&gt;npm install gulp-connect --save-dev&lt;/code&gt;i czekamy, aż zostanie sfinalizowane. Teraz powracamy do edytora i wewnątrz pliku &lt;code&gt;gulpfile.js&lt;/code&gt;, tworzymy dalsze cuda wianki, rozszerzając poprzedni twór:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://scontent.fwaw3-1.fna.fbcdn.net/v/t1.0-9/13226950_1095102517216142_1196267638897465579_n.png?oh=a0a1917f6dd2677ad4afb31c6a0037b3&amp;amp;oe=57CA7DCA&quot; alt=&quot;Gulp&#39;owanie #0-5&quot; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var gulp = require(&#39;gulp&#39;),

connect = require(&#39;gulp-connect&#39;);

gulp.task(&#39;connect&#39;, function() {

  connect.server({

    root: &#39;&#39;,
    livereload: true
    
  });

});

gulp.task(&#39;default&#39;, [&#39;connect&#39;]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A tym razem co za czary? Za pomocą kolejnej zmiennej (tak, leniwy web developer unika powtórzeń), importujemy bibliotekę Connect, odpowiedzialną za serwer http z różnymi możliwościami, następnie wydajemy polecenie Gulp’owi o nazwie ‘connect’, wywołując funkcję &lt;code&gt;connect.server&lt;/code&gt;, wbudowaną bezpośrednio w bibliotekę, wewnątrz której ustawiamy folder domyślny dla serwera &lt;code&gt;root&lt;/code&gt;, jako główny, można rzecz jasna w jakimś podfolderze umieścić serwer oraz odświeżanie strony w czasie rzeczywistym &lt;code&gt;livereload&lt;/code&gt;, o którym opowiem później. Pod koniec rozszerzamy domyślnie polecenie, nakazując Gulp’owi zainicjowanie dodatkowo biblioteki connect. Teraz powracamy do naszej konsoli i wywołujemy komendę &lt;code&gt;gulp&lt;/code&gt;, tak zawsze będziemy wywoływać Gulp’a w ten sposób, to polecenie ani trochę nie ulegnie zmianie i to właśnie piękno i prostota Gulp’a. Naszym oczom powinien się ukazać taki komunikat:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://scontent.fwaw3-1.fna.fbcdn.net/v/t1.0-9/13260189_1095103173882743_6505485002938883474_n.png?oh=84761ced96f72ea8001c6af0a37816ad&amp;amp;oe=57DBB806&quot; alt=&quot;Gulp&#39;owanie #0-6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Zaś owoc naszej pracy jesteśmy w stanie podziwiać przechodząc na adres &lt;code&gt;localhost:8080&lt;/code&gt;, gdzie w zależności od tego co mamy zawarte w &lt;code&gt;index.html&lt;/code&gt;, wyświetli się:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://scontent.fwaw3-1.fna.fbcdn.net/v/t1.0-9/13267839_1095103427216051_6199125224400548081_n.png?oh=98f6dabb5df296d2bcbb46af40fb9d55&amp;amp;oe=57DDF4E0&quot; alt=&quot;Gulp&#39;owanie #0-7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Co świadczy o tym, że nasz serwer http postawiony tylko i wyłącznie z pomocą Gulp’a funkcjonuje bardzo dobrze (jest bardzo szybki, ponieważ jest najprostszy o czym przekonacie się niebawem). Jak widać u mnie wszystko śmiga, a teraz skąd ja wiedziałem właściwie co napisać w &lt;code&gt;gulpfile.js&lt;/code&gt;? Nie jestem cudotwórcą, wystarczyła mi podstawowa dokumentacja odnośnie biblioteki gulp-connect, znajdująca się tutaj: &lt;a href=&quot;https://www.npmjs.com/package/gulp-connect&quot;&gt;npm gulp-connect&lt;/a&gt;, gdzie możecie przeczytać o innych dodatkowych opcjach i możliwościach. Szukając jakiejkolwiek biblioteki do Gulp’a wpisujecie na stronie głównej npmjs, &lt;code&gt;gulp-[szukana fraza]&lt;/code&gt;, otrzymacie pełny wykaz bibliotek od społeczności npm, dzięki której Gulp jest tak potężnym narzędziem do wydajnej pracy web developer’a!&lt;/p&gt;

&lt;p&gt;Myślę, że jak na pokazową, lekcję startować o numerze #0, tyle starczy, w kolejnych lekcjach będzie wam tłumaczył jak działa Gulp’owe przepychanie w rury, dzięki którym będziemy kompilować dowolny język, mówiąc szybciej w tych lekcjach pokażę wam co można z Gulp’em stworzyć i jak to wszystko u mnie funkcjonuje robiąc ze mnie leniwego programistę, który rozkłada swoje stanowisko pracy przy pomocy wyłącznie jednej komendy! Trzymajcie się, liczę na pozytywny odbiór oraz że zechcecie spróbować własnych sił z Gulp’em! A tym czasem Do kolejnej lekcji w Pełni :)&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Prawa zastrzeżone &lt;strong&gt;Furu.ART&lt;/strong&gt;, zakaz kopiowania na inne strony, fanpage czy blogi, bo nogi z &lt;em&gt;**&lt;/em&gt; powyrywam!&lt;/p&gt;
</description>
        <pubDate>Fri, 20 May 2016 16:00:00 +0200</pubDate>
        <link>/gulp-0/</link>
        <guid isPermaLink="true">/gulp-0/</guid>
        
        <category>code</category>
        
        <category>console</category>
        
        <category>developer</category>
        
        <category>front-end</category>
        
        <category>gulp</category>
        
        <category>javascript</category>
        
        <category>konsola</category>
        
        <category>node</category>
        
        <category>npm</category>
        
        <category>pipes</category>
        
        
        <category>Dla webdeveloper&#39;a</category>
        
      </item>
    
  </channel>
</rss>
